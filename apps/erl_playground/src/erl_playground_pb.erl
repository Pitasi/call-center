%% -*- coding: utf-8 -*-
%% Automatically generated, do not edit
%% Generated by gpb_compile version 3.26.6
-module(erl_playground_pb).

-export([encode_msg/1, encode_msg/2]).
-export([decode_msg/2, decode_msg/3]).
-export([merge_msgs/2, merge_msgs/3]).
-export([verify_msg/1, verify_msg/2]).
-export([get_msg_defs/0]).
-export([get_msg_names/0]).
-export([get_enum_names/0]).
-export([find_msg_def/1, fetch_msg_def/1]).
-export([find_enum_def/1, fetch_enum_def/1]).
-export([enum_symbol_by_value/2, enum_value_by_symbol/2]).
-export(['enum_symbol_by_value_req.type_enum'/1, 'enum_value_by_symbol_req.type_enum'/1]).
-export([get_service_names/0]).
-export([get_service_def/1]).
-export([get_rpc_names/1]).
-export([find_rpc_def/2, fetch_rpc_def/2]).
-export([get_package_name/0]).
-export([gpb_version_as_string/0, gpb_version_as_list/0]).

-include("erl_playground_pb.hrl").
-include("gpb.hrl").

%% enumerated types
-type 'req.type_enum'() :: 'create_session' | 'server_message'.
-export_type(['req.type_enum'/0]).

%% message types
-type server_message() :: #server_message{}.
-type create_session() :: #create_session{}.
-type req() :: #req{}.
-type envelope() :: #envelope{}.
-export_type(['server_message'/0, 'create_session'/0, 'req'/0, 'envelope'/0]).


-spec encode_msg(_) -> binary().
encode_msg(Msg) -> encode_msg(Msg, []).


-spec encode_msg(_, list()) -> binary().
encode_msg(Msg, Opts) ->
    verify_msg(Msg, Opts),
    TrUserData = proplists:get_value(user_data, Opts),
    case Msg of
      #server_message{} ->
	  e_msg_server_message(Msg, TrUserData);
      #create_session{} ->
	  e_msg_create_session(Msg, TrUserData);
      #req{} -> e_msg_req(Msg, TrUserData);
      #envelope{} -> e_msg_envelope(Msg, TrUserData)
    end.



e_msg_server_message(Msg, TrUserData) ->
    e_msg_server_message(Msg, <<>>, TrUserData).


e_msg_server_message(#server_message{message = F1}, Bin,
		     TrUserData) ->
    begin
      TrF1 = id(F1, TrUserData),
      e_type_string(TrF1, <<Bin/binary, 10>>)
    end.

e_msg_create_session(Msg, TrUserData) ->
    e_msg_create_session(Msg, <<>>, TrUserData).


e_msg_create_session(#create_session{username = F1},
		     Bin, TrUserData) ->
    begin
      TrF1 = id(F1, TrUserData),
      e_type_string(TrF1, <<Bin/binary, 10>>)
    end.

e_msg_req(Msg, TrUserData) ->
    e_msg_req(Msg, <<>>, TrUserData).


e_msg_req(#req{type = F1, create_session_data = F2,
	       server_message_data = F3},
	  Bin, TrUserData) ->
    B1 = begin
	   TrF1 = id(F1, TrUserData),
	   'e_enum_req.type_enum'(TrF1, <<Bin/binary, 8>>)
	 end,
    B2 = if F2 == undefined -> B1;
	    true ->
		begin
		  TrF2 = id(F2, TrUserData),
		  e_mfield_req_create_session_data(TrF2,
						   <<B1/binary, 18>>,
						   TrUserData)
		end
	 end,
    if F3 == undefined -> B2;
       true ->
	   begin
	     TrF3 = id(F3, TrUserData),
	     e_mfield_req_server_message_data(TrF3,
					      <<B2/binary, 26>>, TrUserData)
	   end
    end.

e_msg_envelope(Msg, TrUserData) ->
    e_msg_envelope(Msg, <<>>, TrUserData).


e_msg_envelope(#envelope{uncompressed_data = F1}, Bin,
	       TrUserData) ->
    begin
      TrF1 = id(F1, TrUserData),
      e_mfield_envelope_uncompressed_data(TrF1,
					  <<Bin/binary, 18>>, TrUserData)
    end.

e_mfield_req_create_session_data(Msg, Bin,
				 TrUserData) ->
    SubBin = e_msg_create_session(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_req_server_message_data(Msg, Bin,
				 TrUserData) ->
    SubBin = e_msg_server_message(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_envelope_uncompressed_data(Msg, Bin,
				    TrUserData) ->
    SubBin = e_msg_req(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.



'e_enum_req.type_enum'(create_session, Bin) ->
    <<Bin/binary, 1>>;
'e_enum_req.type_enum'(server_message, Bin) ->
    <<Bin/binary, 2>>;
'e_enum_req.type_enum'(V, Bin) -> e_varint(V, Bin).

e_type_string(S, Bin) ->
    Utf8 = unicode:characters_to_binary(S),
    Bin2 = e_varint(byte_size(Utf8), Bin),
    <<Bin2/binary, Utf8/binary>>.

e_varint(N, Bin) when N =< 127 -> <<Bin/binary, N>>;
e_varint(N, Bin) ->
    Bin2 = <<Bin/binary, (N band 127 bor 128)>>,
    e_varint(N bsr 7, Bin2).



decode_msg(Bin, MsgName) when is_binary(Bin) ->
    decode_msg(Bin, MsgName, []).

decode_msg(Bin, MsgName, Opts) when is_binary(Bin) ->
    TrUserData = proplists:get_value(user_data, Opts),
    case MsgName of
      server_message -> d_msg_server_message(Bin, TrUserData);
      create_session -> d_msg_create_session(Bin, TrUserData);
      req -> d_msg_req(Bin, TrUserData);
      envelope -> d_msg_envelope(Bin, TrUserData)
    end.



d_msg_server_message(Bin, TrUserData) ->
    dfp_read_field_def_server_message(Bin, 0, 0,
				      id(undefined, TrUserData), TrUserData).

dfp_read_field_def_server_message(<<10, Rest/binary>>,
				  Z1, Z2, F1, TrUserData) ->
    d_field_server_message_message(Rest, Z1, Z2, F1,
				   TrUserData);
dfp_read_field_def_server_message(<<>>, 0, 0, F1, _) ->
    #server_message{message = F1};
dfp_read_field_def_server_message(Other, Z1, Z2, F1,
				  TrUserData) ->
    dg_read_field_def_server_message(Other, Z1, Z2, F1,
				     TrUserData).

dg_read_field_def_server_message(<<1:1, X:7,
				   Rest/binary>>,
				 N, Acc, F1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_server_message(Rest, N + 7,
				     X bsl N + Acc, F1, TrUserData);
dg_read_field_def_server_message(<<0:1, X:7,
				   Rest/binary>>,
				 N, Acc, F1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_server_message_message(Rest, 0, 0, F1,
					 TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_server_message(Rest, 0, 0, F1, TrUserData);
	    1 -> skip_64_server_message(Rest, 0, 0, F1, TrUserData);
	    2 ->
		skip_length_delimited_server_message(Rest, 0, 0, F1,
						     TrUserData);
	    5 -> skip_32_server_message(Rest, 0, 0, F1, TrUserData)
	  end
    end;
dg_read_field_def_server_message(<<>>, 0, 0, F1, _) ->
    #server_message{message = F1}.

d_field_server_message_message(<<1:1, X:7,
				 Rest/binary>>,
			       N, Acc, F1, TrUserData)
    when N < 57 ->
    d_field_server_message_message(Rest, N + 7,
				   X bsl N + Acc, F1, TrUserData);
d_field_server_message_message(<<0:1, X:7,
				 Rest/binary>>,
			       N, Acc, _, TrUserData) ->
    Len = X bsl N + Acc,
    <<Bytes:Len/binary, Rest2/binary>> = Rest,
    NewFValue = binary:copy(Bytes),
    dfp_read_field_def_server_message(Rest2, 0, 0,
				      NewFValue, TrUserData).


skip_varint_server_message(<<1:1, _:7, Rest/binary>>,
			   Z1, Z2, F1, TrUserData) ->
    skip_varint_server_message(Rest, Z1, Z2, F1,
			       TrUserData);
skip_varint_server_message(<<0:1, _:7, Rest/binary>>,
			   Z1, Z2, F1, TrUserData) ->
    dfp_read_field_def_server_message(Rest, Z1, Z2, F1,
				      TrUserData).


skip_length_delimited_server_message(<<1:1, X:7,
				       Rest/binary>>,
				     N, Acc, F1, TrUserData)
    when N < 57 ->
    skip_length_delimited_server_message(Rest, N + 7,
					 X bsl N + Acc, F1, TrUserData);
skip_length_delimited_server_message(<<0:1, X:7,
				       Rest/binary>>,
				     N, Acc, F1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_server_message(Rest2, 0, 0, F1,
				      TrUserData).


skip_32_server_message(<<_:32, Rest/binary>>, Z1, Z2,
		       F1, TrUserData) ->
    dfp_read_field_def_server_message(Rest, Z1, Z2, F1,
				      TrUserData).


skip_64_server_message(<<_:64, Rest/binary>>, Z1, Z2,
		       F1, TrUserData) ->
    dfp_read_field_def_server_message(Rest, Z1, Z2, F1,
				      TrUserData).


d_msg_create_session(Bin, TrUserData) ->
    dfp_read_field_def_create_session(Bin, 0, 0,
				      id(undefined, TrUserData), TrUserData).

dfp_read_field_def_create_session(<<10, Rest/binary>>,
				  Z1, Z2, F1, TrUserData) ->
    d_field_create_session_username(Rest, Z1, Z2, F1,
				    TrUserData);
dfp_read_field_def_create_session(<<>>, 0, 0, F1, _) ->
    #create_session{username = F1};
dfp_read_field_def_create_session(Other, Z1, Z2, F1,
				  TrUserData) ->
    dg_read_field_def_create_session(Other, Z1, Z2, F1,
				     TrUserData).

dg_read_field_def_create_session(<<1:1, X:7,
				   Rest/binary>>,
				 N, Acc, F1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_create_session(Rest, N + 7,
				     X bsl N + Acc, F1, TrUserData);
dg_read_field_def_create_session(<<0:1, X:7,
				   Rest/binary>>,
				 N, Acc, F1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_create_session_username(Rest, 0, 0, F1,
					  TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_create_session(Rest, 0, 0, F1, TrUserData);
	    1 -> skip_64_create_session(Rest, 0, 0, F1, TrUserData);
	    2 ->
		skip_length_delimited_create_session(Rest, 0, 0, F1,
						     TrUserData);
	    5 -> skip_32_create_session(Rest, 0, 0, F1, TrUserData)
	  end
    end;
dg_read_field_def_create_session(<<>>, 0, 0, F1, _) ->
    #create_session{username = F1}.

d_field_create_session_username(<<1:1, X:7,
				  Rest/binary>>,
				N, Acc, F1, TrUserData)
    when N < 57 ->
    d_field_create_session_username(Rest, N + 7,
				    X bsl N + Acc, F1, TrUserData);
d_field_create_session_username(<<0:1, X:7,
				  Rest/binary>>,
				N, Acc, _, TrUserData) ->
    Len = X bsl N + Acc,
    <<Bytes:Len/binary, Rest2/binary>> = Rest,
    NewFValue = binary:copy(Bytes),
    dfp_read_field_def_create_session(Rest2, 0, 0,
				      NewFValue, TrUserData).


skip_varint_create_session(<<1:1, _:7, Rest/binary>>,
			   Z1, Z2, F1, TrUserData) ->
    skip_varint_create_session(Rest, Z1, Z2, F1,
			       TrUserData);
skip_varint_create_session(<<0:1, _:7, Rest/binary>>,
			   Z1, Z2, F1, TrUserData) ->
    dfp_read_field_def_create_session(Rest, Z1, Z2, F1,
				      TrUserData).


skip_length_delimited_create_session(<<1:1, X:7,
				       Rest/binary>>,
				     N, Acc, F1, TrUserData)
    when N < 57 ->
    skip_length_delimited_create_session(Rest, N + 7,
					 X bsl N + Acc, F1, TrUserData);
skip_length_delimited_create_session(<<0:1, X:7,
				       Rest/binary>>,
				     N, Acc, F1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_create_session(Rest2, 0, 0, F1,
				      TrUserData).


skip_32_create_session(<<_:32, Rest/binary>>, Z1, Z2,
		       F1, TrUserData) ->
    dfp_read_field_def_create_session(Rest, Z1, Z2, F1,
				      TrUserData).


skip_64_create_session(<<_:64, Rest/binary>>, Z1, Z2,
		       F1, TrUserData) ->
    dfp_read_field_def_create_session(Rest, Z1, Z2, F1,
				      TrUserData).


d_msg_req(Bin, TrUserData) ->
    dfp_read_field_def_req(Bin, 0, 0,
			   id(undefined, TrUserData), id(undefined, TrUserData),
			   id(undefined, TrUserData), TrUserData).

dfp_read_field_def_req(<<8, Rest/binary>>, Z1, Z2, F1,
		       F2, F3, TrUserData) ->
    d_field_req_type(Rest, Z1, Z2, F1, F2, F3, TrUserData);
dfp_read_field_def_req(<<18, Rest/binary>>, Z1, Z2, F1,
		       F2, F3, TrUserData) ->
    d_field_req_create_session_data(Rest, Z1, Z2, F1, F2,
				    F3, TrUserData);
dfp_read_field_def_req(<<26, Rest/binary>>, Z1, Z2, F1,
		       F2, F3, TrUserData) ->
    d_field_req_server_message_data(Rest, Z1, Z2, F1, F2,
				    F3, TrUserData);
dfp_read_field_def_req(<<>>, 0, 0, F1, F2, F3, _) ->
    #req{type = F1, create_session_data = F2,
	 server_message_data = F3};
dfp_read_field_def_req(Other, Z1, Z2, F1, F2, F3,
		       TrUserData) ->
    dg_read_field_def_req(Other, Z1, Z2, F1, F2, F3,
			  TrUserData).

dg_read_field_def_req(<<1:1, X:7, Rest/binary>>, N, Acc,
		      F1, F2, F3, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_req(Rest, N + 7, X bsl N + Acc, F1,
			  F2, F3, TrUserData);
dg_read_field_def_req(<<0:1, X:7, Rest/binary>>, N, Acc,
		      F1, F2, F3, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_req_type(Rest, 0, 0, F1, F2, F3, TrUserData);
      18 ->
	  d_field_req_create_session_data(Rest, 0, 0, F1, F2, F3,
					  TrUserData);
      26 ->
	  d_field_req_server_message_data(Rest, 0, 0, F1, F2, F3,
					  TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_req(Rest, 0, 0, F1, F2, F3, TrUserData);
	    1 -> skip_64_req(Rest, 0, 0, F1, F2, F3, TrUserData);
	    2 ->
		skip_length_delimited_req(Rest, 0, 0, F1, F2, F3,
					  TrUserData);
	    5 -> skip_32_req(Rest, 0, 0, F1, F2, F3, TrUserData)
	  end
    end;
dg_read_field_def_req(<<>>, 0, 0, F1, F2, F3, _) ->
    #req{type = F1, create_session_data = F2,
	 server_message_data = F3}.

d_field_req_type(<<1:1, X:7, Rest/binary>>, N, Acc, F1,
		 F2, F3, TrUserData)
    when N < 57 ->
    d_field_req_type(Rest, N + 7, X bsl N + Acc, F1, F2, F3,
		     TrUserData);
d_field_req_type(<<0:1, X:7, Rest/binary>>, N, Acc, _,
		 F2, F3, TrUserData) ->
    <<Tmp:32/signed-native>> = <<(X bsl N +
				    Acc):32/unsigned-native>>,
    NewFValue = 'd_enum_req.type_enum'(Tmp),
    dfp_read_field_def_req(Rest, 0, 0, NewFValue, F2, F3,
			   TrUserData).


d_field_req_create_session_data(<<1:1, X:7,
				  Rest/binary>>,
				N, Acc, F1, F2, F3, TrUserData)
    when N < 57 ->
    d_field_req_create_session_data(Rest, N + 7,
				    X bsl N + Acc, F1, F2, F3, TrUserData);
d_field_req_create_session_data(<<0:1, X:7,
				  Rest/binary>>,
				N, Acc, F1, F2, F3, TrUserData) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = id(d_msg_create_session(Bs, TrUserData),
		   TrUserData),
    dfp_read_field_def_req(Rest2, 0, 0, F1,
			   if F2 == undefined -> NewFValue;
			      true ->
				  merge_msg_create_session(F2, NewFValue,
							   TrUserData)
			   end,
			   F3, TrUserData).


d_field_req_server_message_data(<<1:1, X:7,
				  Rest/binary>>,
				N, Acc, F1, F2, F3, TrUserData)
    when N < 57 ->
    d_field_req_server_message_data(Rest, N + 7,
				    X bsl N + Acc, F1, F2, F3, TrUserData);
d_field_req_server_message_data(<<0:1, X:7,
				  Rest/binary>>,
				N, Acc, F1, F2, F3, TrUserData) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = id(d_msg_server_message(Bs, TrUserData),
		   TrUserData),
    dfp_read_field_def_req(Rest2, 0, 0, F1, F2,
			   if F3 == undefined -> NewFValue;
			      true ->
				  merge_msg_server_message(F3, NewFValue,
							   TrUserData)
			   end,
			   TrUserData).


skip_varint_req(<<1:1, _:7, Rest/binary>>, Z1, Z2, F1,
		F2, F3, TrUserData) ->
    skip_varint_req(Rest, Z1, Z2, F1, F2, F3, TrUserData);
skip_varint_req(<<0:1, _:7, Rest/binary>>, Z1, Z2, F1,
		F2, F3, TrUserData) ->
    dfp_read_field_def_req(Rest, Z1, Z2, F1, F2, F3,
			   TrUserData).


skip_length_delimited_req(<<1:1, X:7, Rest/binary>>, N,
			  Acc, F1, F2, F3, TrUserData)
    when N < 57 ->
    skip_length_delimited_req(Rest, N + 7, X bsl N + Acc,
			      F1, F2, F3, TrUserData);
skip_length_delimited_req(<<0:1, X:7, Rest/binary>>, N,
			  Acc, F1, F2, F3, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_req(Rest2, 0, 0, F1, F2, F3,
			   TrUserData).


skip_32_req(<<_:32, Rest/binary>>, Z1, Z2, F1, F2, F3,
	    TrUserData) ->
    dfp_read_field_def_req(Rest, Z1, Z2, F1, F2, F3,
			   TrUserData).


skip_64_req(<<_:64, Rest/binary>>, Z1, Z2, F1, F2, F3,
	    TrUserData) ->
    dfp_read_field_def_req(Rest, Z1, Z2, F1, F2, F3,
			   TrUserData).


d_msg_envelope(Bin, TrUserData) ->
    dfp_read_field_def_envelope(Bin, 0, 0,
				id(undefined, TrUserData), TrUserData).

dfp_read_field_def_envelope(<<18, Rest/binary>>, Z1, Z2,
			    F1, TrUserData) ->
    d_field_envelope_uncompressed_data(Rest, Z1, Z2, F1,
				       TrUserData);
dfp_read_field_def_envelope(<<>>, 0, 0, F1, _) ->
    #envelope{uncompressed_data = F1};
dfp_read_field_def_envelope(Other, Z1, Z2, F1,
			    TrUserData) ->
    dg_read_field_def_envelope(Other, Z1, Z2, F1,
			       TrUserData).

dg_read_field_def_envelope(<<1:1, X:7, Rest/binary>>, N,
			   Acc, F1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_envelope(Rest, N + 7, X bsl N + Acc,
			       F1, TrUserData);
dg_read_field_def_envelope(<<0:1, X:7, Rest/binary>>, N,
			   Acc, F1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      18 ->
	  d_field_envelope_uncompressed_data(Rest, 0, 0, F1,
					     TrUserData);
      _ ->
	  case Key band 7 of
	    0 -> skip_varint_envelope(Rest, 0, 0, F1, TrUserData);
	    1 -> skip_64_envelope(Rest, 0, 0, F1, TrUserData);
	    2 ->
		skip_length_delimited_envelope(Rest, 0, 0, F1,
					       TrUserData);
	    5 -> skip_32_envelope(Rest, 0, 0, F1, TrUserData)
	  end
    end;
dg_read_field_def_envelope(<<>>, 0, 0, F1, _) ->
    #envelope{uncompressed_data = F1}.

d_field_envelope_uncompressed_data(<<1:1, X:7,
				     Rest/binary>>,
				   N, Acc, F1, TrUserData)
    when N < 57 ->
    d_field_envelope_uncompressed_data(Rest, N + 7,
				       X bsl N + Acc, F1, TrUserData);
d_field_envelope_uncompressed_data(<<0:1, X:7,
				     Rest/binary>>,
				   N, Acc, F1, TrUserData) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = id(d_msg_req(Bs, TrUserData), TrUserData),
    dfp_read_field_def_envelope(Rest2, 0, 0,
				if F1 == undefined -> NewFValue;
				   true ->
				       merge_msg_req(F1, NewFValue, TrUserData)
				end,
				TrUserData).


skip_varint_envelope(<<1:1, _:7, Rest/binary>>, Z1, Z2,
		     F1, TrUserData) ->
    skip_varint_envelope(Rest, Z1, Z2, F1, TrUserData);
skip_varint_envelope(<<0:1, _:7, Rest/binary>>, Z1, Z2,
		     F1, TrUserData) ->
    dfp_read_field_def_envelope(Rest, Z1, Z2, F1,
				TrUserData).


skip_length_delimited_envelope(<<1:1, X:7,
				 Rest/binary>>,
			       N, Acc, F1, TrUserData)
    when N < 57 ->
    skip_length_delimited_envelope(Rest, N + 7,
				   X bsl N + Acc, F1, TrUserData);
skip_length_delimited_envelope(<<0:1, X:7,
				 Rest/binary>>,
			       N, Acc, F1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_envelope(Rest2, 0, 0, F1,
				TrUserData).


skip_32_envelope(<<_:32, Rest/binary>>, Z1, Z2, F1,
		 TrUserData) ->
    dfp_read_field_def_envelope(Rest, Z1, Z2, F1,
				TrUserData).


skip_64_envelope(<<_:64, Rest/binary>>, Z1, Z2, F1,
		 TrUserData) ->
    dfp_read_field_def_envelope(Rest, Z1, Z2, F1,
				TrUserData).




'd_enum_req.type_enum'(1) -> create_session;
'd_enum_req.type_enum'(2) -> server_message;
'd_enum_req.type_enum'(V) -> V.



merge_msgs(Prev, New) -> merge_msgs(Prev, New, []).

merge_msgs(Prev, New, Opts)
    when element(1, Prev) =:= element(1, New) ->
    TrUserData = proplists:get_value(user_data, Opts),
    case Prev of
      #server_message{} ->
	  merge_msg_server_message(Prev, New, TrUserData);
      #create_session{} ->
	  merge_msg_create_session(Prev, New, TrUserData);
      #req{} -> merge_msg_req(Prev, New, TrUserData);
      #envelope{} -> merge_msg_envelope(Prev, New, TrUserData)
    end.

merge_msg_server_message(#server_message{},
			 #server_message{message = NFmessage}, _) ->
    #server_message{message = NFmessage}.

merge_msg_create_session(#create_session{},
			 #create_session{username = NFusername}, _) ->
    #create_session{username = NFusername}.

merge_msg_req(#req{create_session_data =
		       PFcreate_session_data,
		   server_message_data = PFserver_message_data},
	      #req{type = NFtype,
		   create_session_data = NFcreate_session_data,
		   server_message_data = NFserver_message_data},
	      TrUserData) ->
    #req{type = NFtype,
	 create_session_data =
	     if PFcreate_session_data /= undefined,
		NFcreate_session_data /= undefined ->
		    merge_msg_create_session(PFcreate_session_data,
					     NFcreate_session_data, TrUserData);
		PFcreate_session_data == undefined ->
		    NFcreate_session_data;
		NFcreate_session_data == undefined ->
		    PFcreate_session_data
	     end,
	 server_message_data =
	     if PFserver_message_data /= undefined,
		NFserver_message_data /= undefined ->
		    merge_msg_server_message(PFserver_message_data,
					     NFserver_message_data, TrUserData);
		PFserver_message_data == undefined ->
		    NFserver_message_data;
		NFserver_message_data == undefined ->
		    PFserver_message_data
	     end}.

merge_msg_envelope(#envelope{uncompressed_data =
				 PFuncompressed_data},
		   #envelope{uncompressed_data = NFuncompressed_data},
		   TrUserData) ->
    #envelope{uncompressed_data =
		  if PFuncompressed_data /= undefined,
		     NFuncompressed_data /= undefined ->
			 merge_msg_req(PFuncompressed_data, NFuncompressed_data,
				       TrUserData);
		     PFuncompressed_data == undefined -> NFuncompressed_data;
		     NFuncompressed_data == undefined -> PFuncompressed_data
		  end}.



verify_msg(Msg) -> verify_msg(Msg, []).

verify_msg(Msg, Opts) ->
    TrUserData = proplists:get_value(user_data, Opts),
    case Msg of
      #server_message{} ->
	  v_msg_server_message(Msg, [server_message], TrUserData);
      #create_session{} ->
	  v_msg_create_session(Msg, [create_session], TrUserData);
      #req{} -> v_msg_req(Msg, [req], TrUserData);
      #envelope{} ->
	  v_msg_envelope(Msg, [envelope], TrUserData);
      _ -> mk_type_error(not_a_known_message, Msg, [])
    end.


-dialyzer({nowarn_function,v_msg_server_message/3}).
v_msg_server_message(#server_message{message = F1},
		     Path, _) ->
    v_type_string(F1, [message | Path]), ok;
v_msg_server_message(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, server_message}, X, Path).

-dialyzer({nowarn_function,v_msg_create_session/3}).
v_msg_create_session(#create_session{username = F1},
		     Path, _) ->
    v_type_string(F1, [username | Path]), ok;
v_msg_create_session(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, create_session}, X, Path).

-dialyzer({nowarn_function,v_msg_req/3}).
v_msg_req(#req{type = F1, create_session_data = F2,
	       server_message_data = F3},
	  Path, TrUserData) ->
    'v_enum_req.type_enum'(F1, [type | Path]),
    if F2 == undefined -> ok;
       true ->
	   v_msg_create_session(F2, [create_session_data | Path],
				TrUserData)
    end,
    if F3 == undefined -> ok;
       true ->
	   v_msg_server_message(F3, [server_message_data | Path],
				TrUserData)
    end,
    ok;
v_msg_req(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, req}, X, Path).

-dialyzer({nowarn_function,v_msg_envelope/3}).
v_msg_envelope(#envelope{uncompressed_data = F1}, Path,
	       TrUserData) ->
    v_msg_req(F1, [uncompressed_data | Path], TrUserData),
    ok.

-dialyzer({nowarn_function,'v_enum_req.type_enum'/2}).
'v_enum_req.type_enum'(create_session, _Path) -> ok;
'v_enum_req.type_enum'(server_message, _Path) -> ok;
'v_enum_req.type_enum'(V, Path) when is_integer(V) ->
    v_type_sint32(V, Path);
'v_enum_req.type_enum'(X, Path) ->
    mk_type_error({invalid_enum, 'req.type_enum'}, X, Path).

-dialyzer({nowarn_function,v_type_sint32/2}).
v_type_sint32(N, _Path)
    when -2147483648 =< N, N =< 2147483647 ->
    ok;
v_type_sint32(N, Path) when is_integer(N) ->
    mk_type_error({value_out_of_range, sint32, signed, 32},
		  N, Path);
v_type_sint32(X, Path) ->
    mk_type_error({bad_integer, sint32, signed, 32}, X,
		  Path).

-dialyzer({nowarn_function,v_type_string/2}).
v_type_string(S, Path) when is_list(S); is_binary(S) ->
    try unicode:characters_to_binary(S) of
      B when is_binary(B) -> ok;
      {error, _, _} ->
	  mk_type_error(bad_unicode_string, S, Path)
    catch
      error:badarg ->
	  mk_type_error(bad_unicode_string, S, Path)
    end;
v_type_string(X, Path) ->
    mk_type_error(bad_unicode_string, X, Path).

-spec mk_type_error(_, _, list()) -> no_return().
mk_type_error(Error, ValueSeen, Path) ->
    Path2 = prettify_path(Path),
    erlang:error({gpb_type_error,
		  {Error, [{value, ValueSeen}, {path, Path2}]}}).


prettify_path([]) -> top_level;
prettify_path(PathR) ->
    list_to_atom(string:join(lists:map(fun atom_to_list/1,
				       lists:reverse(PathR)),
			     ".")).



-compile({inline,id/2}).
id(X, _TrUserData) -> X.




get_msg_defs() ->
    [{{enum, 'req.type_enum'},
      [{create_session, 1}, {server_message, 2}]},
     {{msg, server_message},
      [#field{name = message, fnum = 1, rnum = 2,
	      type = string, occurrence = required, opts = []}]},
     {{msg, create_session},
      [#field{name = username, fnum = 1, rnum = 2,
	      type = string, occurrence = required, opts = []}]},
     {{msg, req},
      [#field{name = type, fnum = 1, rnum = 2,
	      type = {enum, 'req.type_enum'}, occurrence = required,
	      opts = []},
       #field{name = create_session_data, fnum = 2, rnum = 3,
	      type = {msg, create_session}, occurrence = optional,
	      opts = []},
       #field{name = server_message_data, fnum = 3, rnum = 4,
	      type = {msg, server_message}, occurrence = optional,
	      opts = []}]},
     {{msg, envelope},
      [#field{name = uncompressed_data, fnum = 2, rnum = 2,
	      type = {msg, req}, occurrence = required, opts = []}]}].


get_msg_names() ->
    [server_message, create_session, req, envelope].


get_enum_names() -> ['req.type_enum'].


fetch_msg_def(MsgName) ->
    case find_msg_def(MsgName) of
      Fs when is_list(Fs) -> Fs;
      error -> erlang:error({no_such_msg, MsgName})
    end.


fetch_enum_def(EnumName) ->
    case find_enum_def(EnumName) of
      Es when is_list(Es) -> Es;
      error -> erlang:error({no_such_enum, EnumName})
    end.


find_msg_def(server_message) ->
    [#field{name = message, fnum = 1, rnum = 2,
	    type = string, occurrence = required, opts = []}];
find_msg_def(create_session) ->
    [#field{name = username, fnum = 1, rnum = 2,
	    type = string, occurrence = required, opts = []}];
find_msg_def(req) ->
    [#field{name = type, fnum = 1, rnum = 2,
	    type = {enum, 'req.type_enum'}, occurrence = required,
	    opts = []},
     #field{name = create_session_data, fnum = 2, rnum = 3,
	    type = {msg, create_session}, occurrence = optional,
	    opts = []},
     #field{name = server_message_data, fnum = 3, rnum = 4,
	    type = {msg, server_message}, occurrence = optional,
	    opts = []}];
find_msg_def(envelope) ->
    [#field{name = uncompressed_data, fnum = 2, rnum = 2,
	    type = {msg, req}, occurrence = required, opts = []}];
find_msg_def(_) -> error.


find_enum_def('req.type_enum') ->
    [{create_session, 1}, {server_message, 2}];
find_enum_def(_) -> error.


enum_symbol_by_value('req.type_enum', Value) ->
    'enum_symbol_by_value_req.type_enum'(Value).


enum_value_by_symbol('req.type_enum', Sym) ->
    'enum_value_by_symbol_req.type_enum'(Sym).


'enum_symbol_by_value_req.type_enum'(1) ->
    create_session;
'enum_symbol_by_value_req.type_enum'(2) ->
    server_message.


'enum_value_by_symbol_req.type_enum'(create_session) ->
    1;
'enum_value_by_symbol_req.type_enum'(server_message) ->
    2.


get_service_names() -> [].


get_service_def(_) -> error.


get_rpc_names(_) -> error.


find_rpc_def(_, _) -> error.



-spec fetch_rpc_def(_, _) -> no_return().
fetch_rpc_def(ServiceName, RpcName) ->
    erlang:error({no_such_rpc, ServiceName, RpcName}).


get_package_name() -> undefined.



gpb_version_as_string() ->
    "3.26.6".

gpb_version_as_list() ->
    [3,26,6].
