%% -*- coding: utf-8 -*-
%% @private
%% Automatically generated, do not edit
%% Generated by gpb_compile version 4.10.5
-module(erl_playground_pb).

-export([encode_msg/1, encode_msg/2, encode_msg/3]).
-export([decode_msg/2, decode_msg/3]).
-export([merge_msgs/2, merge_msgs/3, merge_msgs/4]).
-export([verify_msg/1, verify_msg/2, verify_msg/3]).
-export([get_msg_defs/0]).
-export([get_msg_names/0]).
-export([get_group_names/0]).
-export([get_msg_or_group_names/0]).
-export([get_enum_names/0]).
-export([find_msg_def/1, fetch_msg_def/1]).
-export([find_enum_def/1, fetch_enum_def/1]).
-export([enum_symbol_by_value/2, enum_value_by_symbol/2]).
-export(['enum_symbol_by_value_req.type_enum'/1, 'enum_value_by_symbol_req.type_enum'/1]).
-export([get_service_names/0]).
-export([get_service_def/1]).
-export([get_rpc_names/1]).
-export([find_rpc_def/2, fetch_rpc_def/2]).
-export([fqbin_to_service_name/1]).
-export([service_name_to_fqbin/1]).
-export([fqbins_to_service_and_rpc_name/2]).
-export([service_and_rpc_name_to_fqbins/2]).
-export([fqbin_to_msg_name/1]).
-export([msg_name_to_fqbin/1]).
-export([fqbin_to_enum_name/1]).
-export([enum_name_to_fqbin/1]).
-export([get_package_name/0]).
-export([uses_packages/0]).
-export([source_basename/0]).
-export([get_all_source_basenames/0]).
-export([get_all_proto_names/0]).
-export([get_msg_containment/1]).
-export([get_pkg_containment/1]).
-export([get_service_containment/1]).
-export([get_rpc_containment/1]).
-export([get_enum_containment/1]).
-export([get_proto_by_msg_name_as_fqbin/1]).
-export([get_proto_by_service_name_as_fqbin/1]).
-export([get_proto_by_enum_name_as_fqbin/1]).
-export([get_protos_by_pkg_name_as_fqbin/1]).
-export([gpb_version_as_string/0, gpb_version_as_list/0]).

-include("erl_playground_pb.hrl").
-include("gpb.hrl").

%% enumerated types
-type 'req.type_enum'() :: create_session | server_message | weather_req | call_id_req | joke_req | operator_req | operator_msg_req | operator_quit_req | chat_req | chat_msg_req | chat_quit_req.
-export_type(['req.type_enum'/0]).

%% message types
-type create_session() :: #create_session{}.

-type server_message() :: #server_message{}.

-type operator_message() :: #operator_message{}.

-type chat_message() :: #chat_message{}.

-type req() :: #req{}.

-type envelope() :: #envelope{}.

-export_type(['create_session'/0, 'server_message'/0, 'operator_message'/0, 'chat_message'/0, 'req'/0, 'envelope'/0]).

-spec encode_msg(#create_session{} | #server_message{} | #operator_message{} | #chat_message{} | #req{} | #envelope{}) -> binary().
encode_msg(Msg) when tuple_size(Msg) >= 1 ->
    encode_msg(Msg, element(1, Msg), []).

-spec encode_msg(#create_session{} | #server_message{} | #operator_message{} | #chat_message{} | #req{} | #envelope{}, atom() | list()) -> binary().
encode_msg(Msg, MsgName) when is_atom(MsgName) ->
    encode_msg(Msg, MsgName, []);
encode_msg(Msg, Opts)
    when tuple_size(Msg) >= 1, is_list(Opts) ->
    encode_msg(Msg, element(1, Msg), Opts).

-spec encode_msg(#create_session{} | #server_message{} | #operator_message{} | #chat_message{} | #req{} | #envelope{}, atom(), list()) -> binary().
encode_msg(Msg, MsgName, Opts) ->
    verify_msg(Msg, MsgName, Opts),
    TrUserData = proplists:get_value(user_data, Opts),
    case MsgName of
      create_session ->
	  encode_msg_create_session(id(Msg, TrUserData),
				    TrUserData);
      server_message ->
	  encode_msg_server_message(id(Msg, TrUserData),
				    TrUserData);
      operator_message ->
	  encode_msg_operator_message(id(Msg, TrUserData),
				      TrUserData);
      chat_message ->
	  encode_msg_chat_message(id(Msg, TrUserData),
				  TrUserData);
      req -> encode_msg_req(id(Msg, TrUserData), TrUserData);
      envelope ->
	  encode_msg_envelope(id(Msg, TrUserData), TrUserData)
    end.


encode_msg_create_session(Msg, TrUserData) ->
    encode_msg_create_session(Msg, <<>>, TrUserData).


encode_msg_create_session(#create_session{username =
					      F1},
			  Bin, TrUserData) ->
    begin
      TrF1 = id(F1, TrUserData),
      e_type_string(TrF1, <<Bin/binary, 10>>, TrUserData)
    end.

encode_msg_server_message(Msg, TrUserData) ->
    encode_msg_server_message(Msg, <<>>, TrUserData).


encode_msg_server_message(#server_message{message = F1},
			  Bin, TrUserData) ->
    begin
      TrF1 = id(F1, TrUserData),
      e_type_string(TrF1, <<Bin/binary, 10>>, TrUserData)
    end.

encode_msg_operator_message(Msg, TrUserData) ->
    encode_msg_operator_message(Msg, <<>>, TrUserData).


encode_msg_operator_message(#operator_message{message =
						  F1},
			    Bin, TrUserData) ->
    begin
      TrF1 = id(F1, TrUserData),
      e_type_string(TrF1, <<Bin/binary, 10>>, TrUserData)
    end.

encode_msg_chat_message(Msg, TrUserData) ->
    encode_msg_chat_message(Msg, <<>>, TrUserData).


encode_msg_chat_message(#chat_message{message = F1},
			Bin, TrUserData) ->
    begin
      TrF1 = id(F1, TrUserData),
      e_type_string(TrF1, <<Bin/binary, 10>>, TrUserData)
    end.

encode_msg_req(Msg, TrUserData) ->
    encode_msg_req(Msg, <<>>, TrUserData).


encode_msg_req(#req{type = F1, create_session_data = F2,
		    server_message_data = F3, operator_msg_data = F4,
		    chat_msg_data = F5},
	       Bin, TrUserData) ->
    B1 = begin
	   TrF1 = id(F1, TrUserData),
	   'e_enum_req.type_enum'(TrF1, <<Bin/binary, 8>>,
				  TrUserData)
	 end,
    B2 = if F2 == undefined -> B1;
	    true ->
		begin
		  TrF2 = id(F2, TrUserData),
		  e_mfield_req_create_session_data(TrF2,
						   <<B1/binary, 18>>,
						   TrUserData)
		end
	 end,
    B3 = if F3 == undefined -> B2;
	    true ->
		begin
		  TrF3 = id(F3, TrUserData),
		  e_mfield_req_server_message_data(TrF3,
						   <<B2/binary, 26>>,
						   TrUserData)
		end
	 end,
    B4 = if F4 == undefined -> B3;
	    true ->
		begin
		  TrF4 = id(F4, TrUserData),
		  e_mfield_req_operator_msg_data(TrF4, <<B3/binary, 34>>,
						 TrUserData)
		end
	 end,
    if F5 == undefined -> B4;
       true ->
	   begin
	     TrF5 = id(F5, TrUserData),
	     e_mfield_req_chat_msg_data(TrF5, <<B4/binary, 42>>,
					TrUserData)
	   end
    end.

encode_msg_envelope(Msg, TrUserData) ->
    encode_msg_envelope(Msg, <<>>, TrUserData).


encode_msg_envelope(#envelope{uncompressed_data = F1},
		    Bin, TrUserData) ->
    begin
      TrF1 = id(F1, TrUserData),
      e_mfield_envelope_uncompressed_data(TrF1,
					  <<Bin/binary, 18>>, TrUserData)
    end.

e_mfield_req_create_session_data(Msg, Bin,
				 TrUserData) ->
    SubBin = encode_msg_create_session(Msg, <<>>,
				       TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_req_server_message_data(Msg, Bin,
				 TrUserData) ->
    SubBin = encode_msg_server_message(Msg, <<>>,
				       TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_req_operator_msg_data(Msg, Bin, TrUserData) ->
    SubBin = encode_msg_operator_message(Msg, <<>>,
					 TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_req_chat_msg_data(Msg, Bin, TrUserData) ->
    SubBin = encode_msg_chat_message(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_envelope_uncompressed_data(Msg, Bin,
				    TrUserData) ->
    SubBin = encode_msg_req(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

'e_enum_req.type_enum'(create_session, Bin,
		       _TrUserData) ->
    <<Bin/binary, 1>>;
'e_enum_req.type_enum'(server_message, Bin,
		       _TrUserData) ->
    <<Bin/binary, 2>>;
'e_enum_req.type_enum'(weather_req, Bin, _TrUserData) ->
    <<Bin/binary, 3>>;
'e_enum_req.type_enum'(call_id_req, Bin, _TrUserData) ->
    <<Bin/binary, 4>>;
'e_enum_req.type_enum'(joke_req, Bin, _TrUserData) ->
    <<Bin/binary, 5>>;
'e_enum_req.type_enum'(operator_req, Bin,
		       _TrUserData) ->
    <<Bin/binary, 6>>;
'e_enum_req.type_enum'(operator_msg_req, Bin,
		       _TrUserData) ->
    <<Bin/binary, 7>>;
'e_enum_req.type_enum'(operator_quit_req, Bin,
		       _TrUserData) ->
    <<Bin/binary, 8>>;
'e_enum_req.type_enum'(chat_req, Bin, _TrUserData) ->
    <<Bin/binary, 9>>;
'e_enum_req.type_enum'(chat_msg_req, Bin,
		       _TrUserData) ->
    <<Bin/binary, 10>>;
'e_enum_req.type_enum'(chat_quit_req, Bin,
		       _TrUserData) ->
    <<Bin/binary, 11>>;
'e_enum_req.type_enum'(V, Bin, _TrUserData) ->
    e_varint(V, Bin).

-compile({nowarn_unused_function,e_type_sint/3}).
e_type_sint(Value, Bin, _TrUserData) when Value >= 0 ->
    e_varint(Value * 2, Bin);
e_type_sint(Value, Bin, _TrUserData) ->
    e_varint(Value * -2 - 1, Bin).

-compile({nowarn_unused_function,e_type_int32/3}).
e_type_int32(Value, Bin, _TrUserData)
    when 0 =< Value, Value =< 127 ->
    <<Bin/binary, Value>>;
e_type_int32(Value, Bin, _TrUserData) ->
    <<N:64/unsigned-native>> = <<Value:64/signed-native>>,
    e_varint(N, Bin).

-compile({nowarn_unused_function,e_type_int64/3}).
e_type_int64(Value, Bin, _TrUserData)
    when 0 =< Value, Value =< 127 ->
    <<Bin/binary, Value>>;
e_type_int64(Value, Bin, _TrUserData) ->
    <<N:64/unsigned-native>> = <<Value:64/signed-native>>,
    e_varint(N, Bin).

-compile({nowarn_unused_function,e_type_bool/3}).
e_type_bool(true, Bin, _TrUserData) ->
    <<Bin/binary, 1>>;
e_type_bool(false, Bin, _TrUserData) ->
    <<Bin/binary, 0>>;
e_type_bool(1, Bin, _TrUserData) -> <<Bin/binary, 1>>;
e_type_bool(0, Bin, _TrUserData) -> <<Bin/binary, 0>>.

-compile({nowarn_unused_function,e_type_string/3}).
e_type_string(S, Bin, _TrUserData) ->
    Utf8 = unicode:characters_to_binary(S),
    Bin2 = e_varint(byte_size(Utf8), Bin),
    <<Bin2/binary, Utf8/binary>>.

-compile({nowarn_unused_function,e_type_bytes/3}).
e_type_bytes(Bytes, Bin, _TrUserData)
    when is_binary(Bytes) ->
    Bin2 = e_varint(byte_size(Bytes), Bin),
    <<Bin2/binary, Bytes/binary>>;
e_type_bytes(Bytes, Bin, _TrUserData)
    when is_list(Bytes) ->
    BytesBin = iolist_to_binary(Bytes),
    Bin2 = e_varint(byte_size(BytesBin), Bin),
    <<Bin2/binary, BytesBin/binary>>.

-compile({nowarn_unused_function,e_type_fixed32/3}).
e_type_fixed32(Value, Bin, _TrUserData) ->
    <<Bin/binary, Value:32/little>>.

-compile({nowarn_unused_function,e_type_sfixed32/3}).
e_type_sfixed32(Value, Bin, _TrUserData) ->
    <<Bin/binary, Value:32/little-signed>>.

-compile({nowarn_unused_function,e_type_fixed64/3}).
e_type_fixed64(Value, Bin, _TrUserData) ->
    <<Bin/binary, Value:64/little>>.

-compile({nowarn_unused_function,e_type_sfixed64/3}).
e_type_sfixed64(Value, Bin, _TrUserData) ->
    <<Bin/binary, Value:64/little-signed>>.

-compile({nowarn_unused_function,e_type_float/3}).
e_type_float(V, Bin, _) when is_number(V) ->
    <<Bin/binary, V:32/little-float>>;
e_type_float(infinity, Bin, _) ->
    <<Bin/binary, 0:16, 128, 127>>;
e_type_float('-infinity', Bin, _) ->
    <<Bin/binary, 0:16, 128, 255>>;
e_type_float(nan, Bin, _) ->
    <<Bin/binary, 0:16, 192, 127>>.

-compile({nowarn_unused_function,e_type_double/3}).
e_type_double(V, Bin, _) when is_number(V) ->
    <<Bin/binary, V:64/little-float>>;
e_type_double(infinity, Bin, _) ->
    <<Bin/binary, 0:48, 240, 127>>;
e_type_double('-infinity', Bin, _) ->
    <<Bin/binary, 0:48, 240, 255>>;
e_type_double(nan, Bin, _) ->
    <<Bin/binary, 0:48, 248, 127>>.

-compile({nowarn_unused_function,e_varint/3}).
e_varint(N, Bin, _TrUserData) -> e_varint(N, Bin).

-compile({nowarn_unused_function,e_varint/2}).
e_varint(N, Bin) when N =< 127 -> <<Bin/binary, N>>;
e_varint(N, Bin) ->
    Bin2 = <<Bin/binary, (N band 127 bor 128)>>,
    e_varint(N bsr 7, Bin2).


decode_msg(Bin, MsgName) when is_binary(Bin) ->
    decode_msg(Bin, MsgName, []).

decode_msg(Bin, MsgName, Opts) when is_binary(Bin) ->
    TrUserData = proplists:get_value(user_data, Opts),
    decode_msg_1_catch(Bin, MsgName, TrUserData).

-ifdef('OTP_RELEASE').
decode_msg_1_catch(Bin, MsgName, TrUserData) ->
    try decode_msg_2_doit(MsgName, Bin, TrUserData)
    catch Class:Reason:StackTrace -> error({gpb_error,{decoding_failure, {Bin, MsgName, {Class, Reason, StackTrace}}}})
    end.
-else.
decode_msg_1_catch(Bin, MsgName, TrUserData) ->
    try decode_msg_2_doit(MsgName, Bin, TrUserData)
    catch Class:Reason ->
        StackTrace = erlang:get_stacktrace(),
        error({gpb_error,{decoding_failure, {Bin, MsgName, {Class, Reason, StackTrace}}}})
    end.
-endif.

decode_msg_2_doit(create_session, Bin, TrUserData) ->
    id(decode_msg_create_session(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit(server_message, Bin, TrUserData) ->
    id(decode_msg_server_message(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit(operator_message, Bin, TrUserData) ->
    id(decode_msg_operator_message(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit(chat_message, Bin, TrUserData) ->
    id(decode_msg_chat_message(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit(req, Bin, TrUserData) ->
    id(decode_msg_req(Bin, TrUserData), TrUserData);
decode_msg_2_doit(envelope, Bin, TrUserData) ->
    id(decode_msg_envelope(Bin, TrUserData), TrUserData).



decode_msg_create_session(Bin, TrUserData) ->
    dfp_read_field_def_create_session(Bin, 0, 0,
				      id(undefined, TrUserData), TrUserData).

dfp_read_field_def_create_session(<<10, Rest/binary>>,
				  Z1, Z2, F@_1, TrUserData) ->
    d_field_create_session_username(Rest, Z1, Z2, F@_1,
				    TrUserData);
dfp_read_field_def_create_session(<<>>, 0, 0, F@_1,
				  _) ->
    #create_session{username = F@_1};
dfp_read_field_def_create_session(Other, Z1, Z2, F@_1,
				  TrUserData) ->
    dg_read_field_def_create_session(Other, Z1, Z2, F@_1,
				     TrUserData).

dg_read_field_def_create_session(<<1:1, X:7,
				   Rest/binary>>,
				 N, Acc, F@_1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_create_session(Rest, N + 7,
				     X bsl N + Acc, F@_1, TrUserData);
dg_read_field_def_create_session(<<0:1, X:7,
				   Rest/binary>>,
				 N, Acc, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_create_session_username(Rest, 0, 0, F@_1,
					  TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_create_session(Rest, 0, 0, F@_1,
					   TrUserData);
	    1 ->
		skip_64_create_session(Rest, 0, 0, F@_1, TrUserData);
	    2 ->
		skip_length_delimited_create_session(Rest, 0, 0, F@_1,
						     TrUserData);
	    3 ->
		skip_group_create_session(Rest, Key bsr 3, 0, F@_1,
					  TrUserData);
	    5 ->
		skip_32_create_session(Rest, 0, 0, F@_1, TrUserData)
	  end
    end;
dg_read_field_def_create_session(<<>>, 0, 0, F@_1, _) ->
    #create_session{username = F@_1}.

d_field_create_session_username(<<1:1, X:7,
				  Rest/binary>>,
				N, Acc, F@_1, TrUserData)
    when N < 57 ->
    d_field_create_session_username(Rest, N + 7,
				    X bsl N + Acc, F@_1, TrUserData);
d_field_create_session_username(<<0:1, X:7,
				  Rest/binary>>,
				N, Acc, _, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bytes:Len/binary, Rest2/binary>> = Rest,
			   {id(binary:copy(Bytes), TrUserData), Rest2}
			 end,
    dfp_read_field_def_create_session(RestF, 0, 0,
				      NewFValue, TrUserData).

skip_varint_create_session(<<1:1, _:7, Rest/binary>>,
			   Z1, Z2, F@_1, TrUserData) ->
    skip_varint_create_session(Rest, Z1, Z2, F@_1,
			       TrUserData);
skip_varint_create_session(<<0:1, _:7, Rest/binary>>,
			   Z1, Z2, F@_1, TrUserData) ->
    dfp_read_field_def_create_session(Rest, Z1, Z2, F@_1,
				      TrUserData).

skip_length_delimited_create_session(<<1:1, X:7,
				       Rest/binary>>,
				     N, Acc, F@_1, TrUserData)
    when N < 57 ->
    skip_length_delimited_create_session(Rest, N + 7,
					 X bsl N + Acc, F@_1, TrUserData);
skip_length_delimited_create_session(<<0:1, X:7,
				       Rest/binary>>,
				     N, Acc, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_create_session(Rest2, 0, 0, F@_1,
				      TrUserData).

skip_group_create_session(Bin, FNum, Z2, F@_1,
			  TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_create_session(Rest, 0, Z2, F@_1,
				      TrUserData).

skip_32_create_session(<<_:32, Rest/binary>>, Z1, Z2,
		       F@_1, TrUserData) ->
    dfp_read_field_def_create_session(Rest, Z1, Z2, F@_1,
				      TrUserData).

skip_64_create_session(<<_:64, Rest/binary>>, Z1, Z2,
		       F@_1, TrUserData) ->
    dfp_read_field_def_create_session(Rest, Z1, Z2, F@_1,
				      TrUserData).

decode_msg_server_message(Bin, TrUserData) ->
    dfp_read_field_def_server_message(Bin, 0, 0,
				      id(undefined, TrUserData), TrUserData).

dfp_read_field_def_server_message(<<10, Rest/binary>>,
				  Z1, Z2, F@_1, TrUserData) ->
    d_field_server_message_message(Rest, Z1, Z2, F@_1,
				   TrUserData);
dfp_read_field_def_server_message(<<>>, 0, 0, F@_1,
				  _) ->
    #server_message{message = F@_1};
dfp_read_field_def_server_message(Other, Z1, Z2, F@_1,
				  TrUserData) ->
    dg_read_field_def_server_message(Other, Z1, Z2, F@_1,
				     TrUserData).

dg_read_field_def_server_message(<<1:1, X:7,
				   Rest/binary>>,
				 N, Acc, F@_1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_server_message(Rest, N + 7,
				     X bsl N + Acc, F@_1, TrUserData);
dg_read_field_def_server_message(<<0:1, X:7,
				   Rest/binary>>,
				 N, Acc, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_server_message_message(Rest, 0, 0, F@_1,
					 TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_server_message(Rest, 0, 0, F@_1,
					   TrUserData);
	    1 ->
		skip_64_server_message(Rest, 0, 0, F@_1, TrUserData);
	    2 ->
		skip_length_delimited_server_message(Rest, 0, 0, F@_1,
						     TrUserData);
	    3 ->
		skip_group_server_message(Rest, Key bsr 3, 0, F@_1,
					  TrUserData);
	    5 ->
		skip_32_server_message(Rest, 0, 0, F@_1, TrUserData)
	  end
    end;
dg_read_field_def_server_message(<<>>, 0, 0, F@_1, _) ->
    #server_message{message = F@_1}.

d_field_server_message_message(<<1:1, X:7,
				 Rest/binary>>,
			       N, Acc, F@_1, TrUserData)
    when N < 57 ->
    d_field_server_message_message(Rest, N + 7,
				   X bsl N + Acc, F@_1, TrUserData);
d_field_server_message_message(<<0:1, X:7,
				 Rest/binary>>,
			       N, Acc, _, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bytes:Len/binary, Rest2/binary>> = Rest,
			   {id(binary:copy(Bytes), TrUserData), Rest2}
			 end,
    dfp_read_field_def_server_message(RestF, 0, 0,
				      NewFValue, TrUserData).

skip_varint_server_message(<<1:1, _:7, Rest/binary>>,
			   Z1, Z2, F@_1, TrUserData) ->
    skip_varint_server_message(Rest, Z1, Z2, F@_1,
			       TrUserData);
skip_varint_server_message(<<0:1, _:7, Rest/binary>>,
			   Z1, Z2, F@_1, TrUserData) ->
    dfp_read_field_def_server_message(Rest, Z1, Z2, F@_1,
				      TrUserData).

skip_length_delimited_server_message(<<1:1, X:7,
				       Rest/binary>>,
				     N, Acc, F@_1, TrUserData)
    when N < 57 ->
    skip_length_delimited_server_message(Rest, N + 7,
					 X bsl N + Acc, F@_1, TrUserData);
skip_length_delimited_server_message(<<0:1, X:7,
				       Rest/binary>>,
				     N, Acc, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_server_message(Rest2, 0, 0, F@_1,
				      TrUserData).

skip_group_server_message(Bin, FNum, Z2, F@_1,
			  TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_server_message(Rest, 0, Z2, F@_1,
				      TrUserData).

skip_32_server_message(<<_:32, Rest/binary>>, Z1, Z2,
		       F@_1, TrUserData) ->
    dfp_read_field_def_server_message(Rest, Z1, Z2, F@_1,
				      TrUserData).

skip_64_server_message(<<_:64, Rest/binary>>, Z1, Z2,
		       F@_1, TrUserData) ->
    dfp_read_field_def_server_message(Rest, Z1, Z2, F@_1,
				      TrUserData).

decode_msg_operator_message(Bin, TrUserData) ->
    dfp_read_field_def_operator_message(Bin, 0, 0,
					id(undefined, TrUserData), TrUserData).

dfp_read_field_def_operator_message(<<10, Rest/binary>>,
				    Z1, Z2, F@_1, TrUserData) ->
    d_field_operator_message_message(Rest, Z1, Z2, F@_1,
				     TrUserData);
dfp_read_field_def_operator_message(<<>>, 0, 0, F@_1,
				    _) ->
    #operator_message{message = F@_1};
dfp_read_field_def_operator_message(Other, Z1, Z2, F@_1,
				    TrUserData) ->
    dg_read_field_def_operator_message(Other, Z1, Z2, F@_1,
				       TrUserData).

dg_read_field_def_operator_message(<<1:1, X:7,
				     Rest/binary>>,
				   N, Acc, F@_1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_operator_message(Rest, N + 7,
				       X bsl N + Acc, F@_1, TrUserData);
dg_read_field_def_operator_message(<<0:1, X:7,
				     Rest/binary>>,
				   N, Acc, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_operator_message_message(Rest, 0, 0, F@_1,
					   TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_operator_message(Rest, 0, 0, F@_1,
					     TrUserData);
	    1 ->
		skip_64_operator_message(Rest, 0, 0, F@_1, TrUserData);
	    2 ->
		skip_length_delimited_operator_message(Rest, 0, 0, F@_1,
						       TrUserData);
	    3 ->
		skip_group_operator_message(Rest, Key bsr 3, 0, F@_1,
					    TrUserData);
	    5 ->
		skip_32_operator_message(Rest, 0, 0, F@_1, TrUserData)
	  end
    end;
dg_read_field_def_operator_message(<<>>, 0, 0, F@_1,
				   _) ->
    #operator_message{message = F@_1}.

d_field_operator_message_message(<<1:1, X:7,
				   Rest/binary>>,
				 N, Acc, F@_1, TrUserData)
    when N < 57 ->
    d_field_operator_message_message(Rest, N + 7,
				     X bsl N + Acc, F@_1, TrUserData);
d_field_operator_message_message(<<0:1, X:7,
				   Rest/binary>>,
				 N, Acc, _, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bytes:Len/binary, Rest2/binary>> = Rest,
			   {id(binary:copy(Bytes), TrUserData), Rest2}
			 end,
    dfp_read_field_def_operator_message(RestF, 0, 0,
					NewFValue, TrUserData).

skip_varint_operator_message(<<1:1, _:7, Rest/binary>>,
			     Z1, Z2, F@_1, TrUserData) ->
    skip_varint_operator_message(Rest, Z1, Z2, F@_1,
				 TrUserData);
skip_varint_operator_message(<<0:1, _:7, Rest/binary>>,
			     Z1, Z2, F@_1, TrUserData) ->
    dfp_read_field_def_operator_message(Rest, Z1, Z2, F@_1,
					TrUserData).

skip_length_delimited_operator_message(<<1:1, X:7,
					 Rest/binary>>,
				       N, Acc, F@_1, TrUserData)
    when N < 57 ->
    skip_length_delimited_operator_message(Rest, N + 7,
					   X bsl N + Acc, F@_1, TrUserData);
skip_length_delimited_operator_message(<<0:1, X:7,
					 Rest/binary>>,
				       N, Acc, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_operator_message(Rest2, 0, 0, F@_1,
					TrUserData).

skip_group_operator_message(Bin, FNum, Z2, F@_1,
			    TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_operator_message(Rest, 0, Z2, F@_1,
					TrUserData).

skip_32_operator_message(<<_:32, Rest/binary>>, Z1, Z2,
			 F@_1, TrUserData) ->
    dfp_read_field_def_operator_message(Rest, Z1, Z2, F@_1,
					TrUserData).

skip_64_operator_message(<<_:64, Rest/binary>>, Z1, Z2,
			 F@_1, TrUserData) ->
    dfp_read_field_def_operator_message(Rest, Z1, Z2, F@_1,
					TrUserData).

decode_msg_chat_message(Bin, TrUserData) ->
    dfp_read_field_def_chat_message(Bin, 0, 0,
				    id(undefined, TrUserData), TrUserData).

dfp_read_field_def_chat_message(<<10, Rest/binary>>, Z1,
				Z2, F@_1, TrUserData) ->
    d_field_chat_message_message(Rest, Z1, Z2, F@_1,
				 TrUserData);
dfp_read_field_def_chat_message(<<>>, 0, 0, F@_1, _) ->
    #chat_message{message = F@_1};
dfp_read_field_def_chat_message(Other, Z1, Z2, F@_1,
				TrUserData) ->
    dg_read_field_def_chat_message(Other, Z1, Z2, F@_1,
				   TrUserData).

dg_read_field_def_chat_message(<<1:1, X:7,
				 Rest/binary>>,
			       N, Acc, F@_1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_chat_message(Rest, N + 7,
				   X bsl N + Acc, F@_1, TrUserData);
dg_read_field_def_chat_message(<<0:1, X:7,
				 Rest/binary>>,
			       N, Acc, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_chat_message_message(Rest, 0, 0, F@_1,
				       TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_chat_message(Rest, 0, 0, F@_1, TrUserData);
	    1 -> skip_64_chat_message(Rest, 0, 0, F@_1, TrUserData);
	    2 ->
		skip_length_delimited_chat_message(Rest, 0, 0, F@_1,
						   TrUserData);
	    3 ->
		skip_group_chat_message(Rest, Key bsr 3, 0, F@_1,
					TrUserData);
	    5 -> skip_32_chat_message(Rest, 0, 0, F@_1, TrUserData)
	  end
    end;
dg_read_field_def_chat_message(<<>>, 0, 0, F@_1, _) ->
    #chat_message{message = F@_1}.

d_field_chat_message_message(<<1:1, X:7, Rest/binary>>,
			     N, Acc, F@_1, TrUserData)
    when N < 57 ->
    d_field_chat_message_message(Rest, N + 7, X bsl N + Acc,
				 F@_1, TrUserData);
d_field_chat_message_message(<<0:1, X:7, Rest/binary>>,
			     N, Acc, _, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bytes:Len/binary, Rest2/binary>> = Rest,
			   {id(binary:copy(Bytes), TrUserData), Rest2}
			 end,
    dfp_read_field_def_chat_message(RestF, 0, 0, NewFValue,
				    TrUserData).

skip_varint_chat_message(<<1:1, _:7, Rest/binary>>, Z1,
			 Z2, F@_1, TrUserData) ->
    skip_varint_chat_message(Rest, Z1, Z2, F@_1,
			     TrUserData);
skip_varint_chat_message(<<0:1, _:7, Rest/binary>>, Z1,
			 Z2, F@_1, TrUserData) ->
    dfp_read_field_def_chat_message(Rest, Z1, Z2, F@_1,
				    TrUserData).

skip_length_delimited_chat_message(<<1:1, X:7,
				     Rest/binary>>,
				   N, Acc, F@_1, TrUserData)
    when N < 57 ->
    skip_length_delimited_chat_message(Rest, N + 7,
				       X bsl N + Acc, F@_1, TrUserData);
skip_length_delimited_chat_message(<<0:1, X:7,
				     Rest/binary>>,
				   N, Acc, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_chat_message(Rest2, 0, 0, F@_1,
				    TrUserData).

skip_group_chat_message(Bin, FNum, Z2, F@_1,
			TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_chat_message(Rest, 0, Z2, F@_1,
				    TrUserData).

skip_32_chat_message(<<_:32, Rest/binary>>, Z1, Z2,
		     F@_1, TrUserData) ->
    dfp_read_field_def_chat_message(Rest, Z1, Z2, F@_1,
				    TrUserData).

skip_64_chat_message(<<_:64, Rest/binary>>, Z1, Z2,
		     F@_1, TrUserData) ->
    dfp_read_field_def_chat_message(Rest, Z1, Z2, F@_1,
				    TrUserData).

decode_msg_req(Bin, TrUserData) ->
    dfp_read_field_def_req(Bin, 0, 0,
			   id(undefined, TrUserData), id(undefined, TrUserData),
			   id(undefined, TrUserData), id(undefined, TrUserData),
			   id(undefined, TrUserData), TrUserData).

dfp_read_field_def_req(<<8, Rest/binary>>, Z1, Z2, F@_1,
		       F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    d_field_req_type(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4,
		     F@_5, TrUserData);
dfp_read_field_def_req(<<18, Rest/binary>>, Z1, Z2,
		       F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    d_field_req_create_session_data(Rest, Z1, Z2, F@_1,
				    F@_2, F@_3, F@_4, F@_5, TrUserData);
dfp_read_field_def_req(<<26, Rest/binary>>, Z1, Z2,
		       F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    d_field_req_server_message_data(Rest, Z1, Z2, F@_1,
				    F@_2, F@_3, F@_4, F@_5, TrUserData);
dfp_read_field_def_req(<<34, Rest/binary>>, Z1, Z2,
		       F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    d_field_req_operator_msg_data(Rest, Z1, Z2, F@_1, F@_2,
				  F@_3, F@_4, F@_5, TrUserData);
dfp_read_field_def_req(<<42, Rest/binary>>, Z1, Z2,
		       F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    d_field_req_chat_msg_data(Rest, Z1, Z2, F@_1, F@_2,
			      F@_3, F@_4, F@_5, TrUserData);
dfp_read_field_def_req(<<>>, 0, 0, F@_1, F@_2, F@_3,
		       F@_4, F@_5, _) ->
    #req{type = F@_1, create_session_data = F@_2,
	 server_message_data = F@_3, operator_msg_data = F@_4,
	 chat_msg_data = F@_5};
dfp_read_field_def_req(Other, Z1, Z2, F@_1, F@_2, F@_3,
		       F@_4, F@_5, TrUserData) ->
    dg_read_field_def_req(Other, Z1, Z2, F@_1, F@_2, F@_3,
			  F@_4, F@_5, TrUserData).

dg_read_field_def_req(<<1:1, X:7, Rest/binary>>, N, Acc,
		      F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_req(Rest, N + 7, X bsl N + Acc, F@_1,
			  F@_2, F@_3, F@_4, F@_5, TrUserData);
dg_read_field_def_req(<<0:1, X:7, Rest/binary>>, N, Acc,
		      F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_req_type(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4,
			   F@_5, TrUserData);
      18 ->
	  d_field_req_create_session_data(Rest, 0, 0, F@_1, F@_2,
					  F@_3, F@_4, F@_5, TrUserData);
      26 ->
	  d_field_req_server_message_data(Rest, 0, 0, F@_1, F@_2,
					  F@_3, F@_4, F@_5, TrUserData);
      34 ->
	  d_field_req_operator_msg_data(Rest, 0, 0, F@_1, F@_2,
					F@_3, F@_4, F@_5, TrUserData);
      42 ->
	  d_field_req_chat_msg_data(Rest, 0, 0, F@_1, F@_2, F@_3,
				    F@_4, F@_5, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_req(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4,
				F@_5, TrUserData);
	    1 ->
		skip_64_req(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5,
			    TrUserData);
	    2 ->
		skip_length_delimited_req(Rest, 0, 0, F@_1, F@_2, F@_3,
					  F@_4, F@_5, TrUserData);
	    3 ->
		skip_group_req(Rest, Key bsr 3, 0, F@_1, F@_2, F@_3,
			       F@_4, F@_5, TrUserData);
	    5 ->
		skip_32_req(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5,
			    TrUserData)
	  end
    end;
dg_read_field_def_req(<<>>, 0, 0, F@_1, F@_2, F@_3,
		      F@_4, F@_5, _) ->
    #req{type = F@_1, create_session_data = F@_2,
	 server_message_data = F@_3, operator_msg_data = F@_4,
	 chat_msg_data = F@_5}.

d_field_req_type(<<1:1, X:7, Rest/binary>>, N, Acc,
		 F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData)
    when N < 57 ->
    d_field_req_type(Rest, N + 7, X bsl N + Acc, F@_1, F@_2,
		     F@_3, F@_4, F@_5, TrUserData);
d_field_req_type(<<0:1, X:7, Rest/binary>>, N, Acc, _,
		 F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    {NewFValue, RestF} = {id('d_enum_req.type_enum'(begin
						      <<Res:32/signed-native>> =
							  <<(X bsl N +
							       Acc):32/unsigned-native>>,
						      id(Res, TrUserData)
						    end),
			     TrUserData),
			  Rest},
    dfp_read_field_def_req(RestF, 0, 0, NewFValue, F@_2,
			   F@_3, F@_4, F@_5, TrUserData).

d_field_req_create_session_data(<<1:1, X:7,
				  Rest/binary>>,
				N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
				TrUserData)
    when N < 57 ->
    d_field_req_create_session_data(Rest, N + 7,
				    X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
				    TrUserData);
d_field_req_create_session_data(<<0:1, X:7,
				  Rest/binary>>,
				N, Acc, F@_1, Prev, F@_3, F@_4, F@_5,
				TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(decode_msg_create_session(Bs, TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_req(RestF, 0, 0, F@_1,
			   if Prev == undefined -> NewFValue;
			      true ->
				  merge_msg_create_session(Prev, NewFValue,
							   TrUserData)
			   end,
			   F@_3, F@_4, F@_5, TrUserData).

d_field_req_server_message_data(<<1:1, X:7,
				  Rest/binary>>,
				N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
				TrUserData)
    when N < 57 ->
    d_field_req_server_message_data(Rest, N + 7,
				    X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
				    TrUserData);
d_field_req_server_message_data(<<0:1, X:7,
				  Rest/binary>>,
				N, Acc, F@_1, F@_2, Prev, F@_4, F@_5,
				TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(decode_msg_server_message(Bs, TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_req(RestF, 0, 0, F@_1, F@_2,
			   if Prev == undefined -> NewFValue;
			      true ->
				  merge_msg_server_message(Prev, NewFValue,
							   TrUserData)
			   end,
			   F@_4, F@_5, TrUserData).

d_field_req_operator_msg_data(<<1:1, X:7, Rest/binary>>,
			      N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData)
    when N < 57 ->
    d_field_req_operator_msg_data(Rest, N + 7,
				  X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
				  TrUserData);
d_field_req_operator_msg_data(<<0:1, X:7, Rest/binary>>,
			      N, Acc, F@_1, F@_2, F@_3, Prev, F@_5,
			      TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(decode_msg_operator_message(Bs, TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_req(RestF, 0, 0, F@_1, F@_2, F@_3,
			   if Prev == undefined -> NewFValue;
			      true ->
				  merge_msg_operator_message(Prev, NewFValue,
							     TrUserData)
			   end,
			   F@_5, TrUserData).

d_field_req_chat_msg_data(<<1:1, X:7, Rest/binary>>, N,
			  Acc, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData)
    when N < 57 ->
    d_field_req_chat_msg_data(Rest, N + 7, X bsl N + Acc,
			      F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
d_field_req_chat_msg_data(<<0:1, X:7, Rest/binary>>, N,
			  Acc, F@_1, F@_2, F@_3, F@_4, Prev, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(decode_msg_chat_message(Bs, TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_req(RestF, 0, 0, F@_1, F@_2, F@_3,
			   F@_4,
			   if Prev == undefined -> NewFValue;
			      true ->
				  merge_msg_chat_message(Prev, NewFValue,
							 TrUserData)
			   end,
			   TrUserData).

skip_varint_req(<<1:1, _:7, Rest/binary>>, Z1, Z2, F@_1,
		F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    skip_varint_req(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4,
		    F@_5, TrUserData);
skip_varint_req(<<0:1, _:7, Rest/binary>>, Z1, Z2, F@_1,
		F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    dfp_read_field_def_req(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			   F@_4, F@_5, TrUserData).

skip_length_delimited_req(<<1:1, X:7, Rest/binary>>, N,
			  Acc, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData)
    when N < 57 ->
    skip_length_delimited_req(Rest, N + 7, X bsl N + Acc,
			      F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
skip_length_delimited_req(<<0:1, X:7, Rest/binary>>, N,
			  Acc, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_req(Rest2, 0, 0, F@_1, F@_2, F@_3,
			   F@_4, F@_5, TrUserData).

skip_group_req(Bin, FNum, Z2, F@_1, F@_2, F@_3, F@_4,
	       F@_5, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_req(Rest, 0, Z2, F@_1, F@_2, F@_3,
			   F@_4, F@_5, TrUserData).

skip_32_req(<<_:32, Rest/binary>>, Z1, Z2, F@_1, F@_2,
	    F@_3, F@_4, F@_5, TrUserData) ->
    dfp_read_field_def_req(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			   F@_4, F@_5, TrUserData).

skip_64_req(<<_:64, Rest/binary>>, Z1, Z2, F@_1, F@_2,
	    F@_3, F@_4, F@_5, TrUserData) ->
    dfp_read_field_def_req(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			   F@_4, F@_5, TrUserData).

decode_msg_envelope(Bin, TrUserData) ->
    dfp_read_field_def_envelope(Bin, 0, 0,
				id(undefined, TrUserData), TrUserData).

dfp_read_field_def_envelope(<<18, Rest/binary>>, Z1, Z2,
			    F@_1, TrUserData) ->
    d_field_envelope_uncompressed_data(Rest, Z1, Z2, F@_1,
				       TrUserData);
dfp_read_field_def_envelope(<<>>, 0, 0, F@_1, _) ->
    #envelope{uncompressed_data = F@_1};
dfp_read_field_def_envelope(Other, Z1, Z2, F@_1,
			    TrUserData) ->
    dg_read_field_def_envelope(Other, Z1, Z2, F@_1,
			       TrUserData).

dg_read_field_def_envelope(<<1:1, X:7, Rest/binary>>, N,
			   Acc, F@_1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_envelope(Rest, N + 7, X bsl N + Acc,
			       F@_1, TrUserData);
dg_read_field_def_envelope(<<0:1, X:7, Rest/binary>>, N,
			   Acc, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      18 ->
	  d_field_envelope_uncompressed_data(Rest, 0, 0, F@_1,
					     TrUserData);
      _ ->
	  case Key band 7 of
	    0 -> skip_varint_envelope(Rest, 0, 0, F@_1, TrUserData);
	    1 -> skip_64_envelope(Rest, 0, 0, F@_1, TrUserData);
	    2 ->
		skip_length_delimited_envelope(Rest, 0, 0, F@_1,
					       TrUserData);
	    3 ->
		skip_group_envelope(Rest, Key bsr 3, 0, F@_1,
				    TrUserData);
	    5 -> skip_32_envelope(Rest, 0, 0, F@_1, TrUserData)
	  end
    end;
dg_read_field_def_envelope(<<>>, 0, 0, F@_1, _) ->
    #envelope{uncompressed_data = F@_1}.

d_field_envelope_uncompressed_data(<<1:1, X:7,
				     Rest/binary>>,
				   N, Acc, F@_1, TrUserData)
    when N < 57 ->
    d_field_envelope_uncompressed_data(Rest, N + 7,
				       X bsl N + Acc, F@_1, TrUserData);
d_field_envelope_uncompressed_data(<<0:1, X:7,
				     Rest/binary>>,
				   N, Acc, Prev, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(decode_msg_req(Bs, TrUserData), TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_envelope(RestF, 0, 0,
				if Prev == undefined -> NewFValue;
				   true ->
				       merge_msg_req(Prev, NewFValue,
						     TrUserData)
				end,
				TrUserData).

skip_varint_envelope(<<1:1, _:7, Rest/binary>>, Z1, Z2,
		     F@_1, TrUserData) ->
    skip_varint_envelope(Rest, Z1, Z2, F@_1, TrUserData);
skip_varint_envelope(<<0:1, _:7, Rest/binary>>, Z1, Z2,
		     F@_1, TrUserData) ->
    dfp_read_field_def_envelope(Rest, Z1, Z2, F@_1,
				TrUserData).

skip_length_delimited_envelope(<<1:1, X:7,
				 Rest/binary>>,
			       N, Acc, F@_1, TrUserData)
    when N < 57 ->
    skip_length_delimited_envelope(Rest, N + 7,
				   X bsl N + Acc, F@_1, TrUserData);
skip_length_delimited_envelope(<<0:1, X:7,
				 Rest/binary>>,
			       N, Acc, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_envelope(Rest2, 0, 0, F@_1,
				TrUserData).

skip_group_envelope(Bin, FNum, Z2, F@_1, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_envelope(Rest, 0, Z2, F@_1,
				TrUserData).

skip_32_envelope(<<_:32, Rest/binary>>, Z1, Z2, F@_1,
		 TrUserData) ->
    dfp_read_field_def_envelope(Rest, Z1, Z2, F@_1,
				TrUserData).

skip_64_envelope(<<_:64, Rest/binary>>, Z1, Z2, F@_1,
		 TrUserData) ->
    dfp_read_field_def_envelope(Rest, Z1, Z2, F@_1,
				TrUserData).

'd_enum_req.type_enum'(1) -> create_session;
'd_enum_req.type_enum'(2) -> server_message;
'd_enum_req.type_enum'(3) -> weather_req;
'd_enum_req.type_enum'(4) -> call_id_req;
'd_enum_req.type_enum'(5) -> joke_req;
'd_enum_req.type_enum'(6) -> operator_req;
'd_enum_req.type_enum'(7) -> operator_msg_req;
'd_enum_req.type_enum'(8) -> operator_quit_req;
'd_enum_req.type_enum'(9) -> chat_req;
'd_enum_req.type_enum'(10) -> chat_msg_req;
'd_enum_req.type_enum'(11) -> chat_quit_req;
'd_enum_req.type_enum'(V) -> V.

read_group(Bin, FieldNum) ->
    {NumBytes, EndTagLen} = read_gr_b(Bin, 0, 0, 0, 0, FieldNum),
    <<Group:NumBytes/binary, _:EndTagLen/binary, Rest/binary>> = Bin,
    {Group, Rest}.

%% Like skipping over fields, but record the total length,
%% Each field is <(FieldNum bsl 3) bor FieldType> ++ <FieldValue>
%% Record the length because varints may be non-optimally encoded.
%%
%% Groups can be nested, but assume the same FieldNum cannot be nested
%% because group field numbers are shared with the rest of the fields
%% numbers. Thus we can search just for an group-end with the same
%% field number.
%%
%% (The only time the same group field number could occur would
%% be in a nested sub message, but then it would be inside a
%% length-delimited entry, which we skip-read by length.)
read_gr_b(<<1:1, X:7, Tl/binary>>, N, Acc, NumBytes, TagLen, FieldNum)
  when N < (32-7) ->
    read_gr_b(Tl, N+7, X bsl N + Acc, NumBytes, TagLen+1, FieldNum);
read_gr_b(<<0:1, X:7, Tl/binary>>, N, Acc, NumBytes, TagLen,
          FieldNum) ->
    Key = X bsl N + Acc,
    TagLen1 = TagLen + 1,
    case {Key bsr 3, Key band 7} of
        {FieldNum, 4} -> % 4 = group_end
            {NumBytes, TagLen1};
        {_, 0} -> % 0 = varint
            read_gr_vi(Tl, 0, NumBytes + TagLen1, FieldNum);
        {_, 1} -> % 1 = bits64
            <<_:64, Tl2/binary>> = Tl,
            read_gr_b(Tl2, 0, 0, NumBytes + TagLen1 + 8, 0, FieldNum);
        {_, 2} -> % 2 = length_delimited
            read_gr_ld(Tl, 0, 0, NumBytes + TagLen1, FieldNum);
        {_, 3} -> % 3 = group_start
            read_gr_b(Tl, 0, 0, NumBytes + TagLen1, 0, FieldNum);
        {_, 4} -> % 4 = group_end
            read_gr_b(Tl, 0, 0, NumBytes + TagLen1, 0, FieldNum);
        {_, 5} -> % 5 = bits32
            <<_:32, Tl2/binary>> = Tl,
            read_gr_b(Tl2, 0, 0, NumBytes + TagLen1 + 4, 0, FieldNum)
    end.

read_gr_vi(<<1:1, _:7, Tl/binary>>, N, NumBytes, FieldNum)
  when N < (64-7) ->
    read_gr_vi(Tl, N+7, NumBytes+1, FieldNum);
read_gr_vi(<<0:1, _:7, Tl/binary>>, _, NumBytes, FieldNum) ->
    read_gr_b(Tl, 0, 0, NumBytes+1, 0, FieldNum).

read_gr_ld(<<1:1, X:7, Tl/binary>>, N, Acc, NumBytes, FieldNum)
  when N < (64-7) ->
    read_gr_ld(Tl, N+7, X bsl N + Acc, NumBytes+1, FieldNum);
read_gr_ld(<<0:1, X:7, Tl/binary>>, N, Acc, NumBytes, FieldNum) ->
    Len = X bsl N + Acc,
    NumBytes1 = NumBytes + 1,
    <<_:Len/binary, Tl2/binary>> = Tl,
    read_gr_b(Tl2, 0, 0, NumBytes1 + Len, 0, FieldNum).

merge_msgs(Prev, New)
    when element(1, Prev) =:= element(1, New) ->
    merge_msgs(Prev, New, element(1, Prev), []).

merge_msgs(Prev, New, MsgName) when is_atom(MsgName) ->
    merge_msgs(Prev, New, MsgName, []);
merge_msgs(Prev, New, Opts)
    when element(1, Prev) =:= element(1, New),
	 is_list(Opts) ->
    merge_msgs(Prev, New, element(1, Prev), Opts).

merge_msgs(Prev, New, MsgName, Opts) ->
    TrUserData = proplists:get_value(user_data, Opts),
    case MsgName of
      create_session ->
	  merge_msg_create_session(Prev, New, TrUserData);
      server_message ->
	  merge_msg_server_message(Prev, New, TrUserData);
      operator_message ->
	  merge_msg_operator_message(Prev, New, TrUserData);
      chat_message ->
	  merge_msg_chat_message(Prev, New, TrUserData);
      req -> merge_msg_req(Prev, New, TrUserData);
      envelope -> merge_msg_envelope(Prev, New, TrUserData)
    end.

-compile({nowarn_unused_function,merge_msg_create_session/3}).
merge_msg_create_session(#create_session{},
			 #create_session{username = NFusername}, _) ->
    #create_session{username = NFusername}.

-compile({nowarn_unused_function,merge_msg_server_message/3}).
merge_msg_server_message(#server_message{},
			 #server_message{message = NFmessage}, _) ->
    #server_message{message = NFmessage}.

-compile({nowarn_unused_function,merge_msg_operator_message/3}).
merge_msg_operator_message(#operator_message{},
			   #operator_message{message = NFmessage}, _) ->
    #operator_message{message = NFmessage}.

-compile({nowarn_unused_function,merge_msg_chat_message/3}).
merge_msg_chat_message(#chat_message{},
		       #chat_message{message = NFmessage}, _) ->
    #chat_message{message = NFmessage}.

-compile({nowarn_unused_function,merge_msg_req/3}).
merge_msg_req(#req{create_session_data =
		       PFcreate_session_data,
		   server_message_data = PFserver_message_data,
		   operator_msg_data = PFoperator_msg_data,
		   chat_msg_data = PFchat_msg_data},
	      #req{type = NFtype,
		   create_session_data = NFcreate_session_data,
		   server_message_data = NFserver_message_data,
		   operator_msg_data = NFoperator_msg_data,
		   chat_msg_data = NFchat_msg_data},
	      TrUserData) ->
    #req{type = NFtype,
	 create_session_data =
	     if PFcreate_session_data /= undefined,
		NFcreate_session_data /= undefined ->
		    merge_msg_create_session(PFcreate_session_data,
					     NFcreate_session_data, TrUserData);
		PFcreate_session_data == undefined ->
		    NFcreate_session_data;
		NFcreate_session_data == undefined ->
		    PFcreate_session_data
	     end,
	 server_message_data =
	     if PFserver_message_data /= undefined,
		NFserver_message_data /= undefined ->
		    merge_msg_server_message(PFserver_message_data,
					     NFserver_message_data, TrUserData);
		PFserver_message_data == undefined ->
		    NFserver_message_data;
		NFserver_message_data == undefined ->
		    PFserver_message_data
	     end,
	 operator_msg_data =
	     if PFoperator_msg_data /= undefined,
		NFoperator_msg_data /= undefined ->
		    merge_msg_operator_message(PFoperator_msg_data,
					       NFoperator_msg_data, TrUserData);
		PFoperator_msg_data == undefined -> NFoperator_msg_data;
		NFoperator_msg_data == undefined -> PFoperator_msg_data
	     end,
	 chat_msg_data =
	     if PFchat_msg_data /= undefined,
		NFchat_msg_data /= undefined ->
		    merge_msg_chat_message(PFchat_msg_data, NFchat_msg_data,
					   TrUserData);
		PFchat_msg_data == undefined -> NFchat_msg_data;
		NFchat_msg_data == undefined -> PFchat_msg_data
	     end}.

-compile({nowarn_unused_function,merge_msg_envelope/3}).
merge_msg_envelope(#envelope{uncompressed_data =
				 PFuncompressed_data},
		   #envelope{uncompressed_data = NFuncompressed_data},
		   TrUserData) ->
    #envelope{uncompressed_data =
		  merge_msg_req(PFuncompressed_data, NFuncompressed_data,
				TrUserData)}.


verify_msg(Msg) when tuple_size(Msg) >= 1 ->
    verify_msg(Msg, element(1, Msg), []);
verify_msg(X) ->
    mk_type_error(not_a_known_message, X, []).

verify_msg(Msg, MsgName) when is_atom(MsgName) ->
    verify_msg(Msg, MsgName, []);
verify_msg(Msg, Opts) when tuple_size(Msg) >= 1 ->
    verify_msg(Msg, element(1, Msg), Opts);
verify_msg(X, _Opts) ->
    mk_type_error(not_a_known_message, X, []).

verify_msg(Msg, MsgName, Opts) ->
    TrUserData = proplists:get_value(user_data, Opts),
    case MsgName of
      create_session ->
	  v_msg_create_session(Msg, [MsgName], TrUserData);
      server_message ->
	  v_msg_server_message(Msg, [MsgName], TrUserData);
      operator_message ->
	  v_msg_operator_message(Msg, [MsgName], TrUserData);
      chat_message ->
	  v_msg_chat_message(Msg, [MsgName], TrUserData);
      req -> v_msg_req(Msg, [MsgName], TrUserData);
      envelope -> v_msg_envelope(Msg, [MsgName], TrUserData);
      _ -> mk_type_error(not_a_known_message, Msg, [])
    end.


-compile({nowarn_unused_function,v_msg_create_session/3}).
-dialyzer({nowarn_function,v_msg_create_session/3}).
v_msg_create_session(#create_session{username = F1},
		     Path, TrUserData) ->
    v_type_string(F1, [username | Path], TrUserData), ok;
v_msg_create_session(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, create_session}, X, Path).

-compile({nowarn_unused_function,v_msg_server_message/3}).
-dialyzer({nowarn_function,v_msg_server_message/3}).
v_msg_server_message(#server_message{message = F1},
		     Path, TrUserData) ->
    v_type_string(F1, [message | Path], TrUserData), ok;
v_msg_server_message(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, server_message}, X, Path).

-compile({nowarn_unused_function,v_msg_operator_message/3}).
-dialyzer({nowarn_function,v_msg_operator_message/3}).
v_msg_operator_message(#operator_message{message = F1},
		       Path, TrUserData) ->
    v_type_string(F1, [message | Path], TrUserData), ok;
v_msg_operator_message(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, operator_message}, X,
		  Path).

-compile({nowarn_unused_function,v_msg_chat_message/3}).
-dialyzer({nowarn_function,v_msg_chat_message/3}).
v_msg_chat_message(#chat_message{message = F1}, Path,
		   TrUserData) ->
    v_type_string(F1, [message | Path], TrUserData), ok;
v_msg_chat_message(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, chat_message}, X, Path).

-compile({nowarn_unused_function,v_msg_req/3}).
-dialyzer({nowarn_function,v_msg_req/3}).
v_msg_req(#req{type = F1, create_session_data = F2,
	       server_message_data = F3, operator_msg_data = F4,
	       chat_msg_data = F5},
	  Path, TrUserData) ->
    'v_enum_req.type_enum'(F1, [type | Path], TrUserData),
    if F2 == undefined -> ok;
       true ->
	   v_msg_create_session(F2, [create_session_data | Path],
				TrUserData)
    end,
    if F3 == undefined -> ok;
       true ->
	   v_msg_server_message(F3, [server_message_data | Path],
				TrUserData)
    end,
    if F4 == undefined -> ok;
       true ->
	   v_msg_operator_message(F4, [operator_msg_data | Path],
				  TrUserData)
    end,
    if F5 == undefined -> ok;
       true ->
	   v_msg_chat_message(F5, [chat_msg_data | Path],
			      TrUserData)
    end,
    ok;
v_msg_req(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, req}, X, Path).

-compile({nowarn_unused_function,v_msg_envelope/3}).
-dialyzer({nowarn_function,v_msg_envelope/3}).
v_msg_envelope(#envelope{uncompressed_data = F1}, Path,
	       TrUserData) ->
    v_msg_req(F1, [uncompressed_data | Path], TrUserData),
    ok;
v_msg_envelope(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, envelope}, X, Path).

-compile({nowarn_unused_function,'v_enum_req.type_enum'/3}).
-dialyzer({nowarn_function,'v_enum_req.type_enum'/3}).
'v_enum_req.type_enum'(create_session, _Path,
		       _TrUserData) ->
    ok;
'v_enum_req.type_enum'(server_message, _Path,
		       _TrUserData) ->
    ok;
'v_enum_req.type_enum'(weather_req, _Path,
		       _TrUserData) ->
    ok;
'v_enum_req.type_enum'(call_id_req, _Path,
		       _TrUserData) ->
    ok;
'v_enum_req.type_enum'(joke_req, _Path, _TrUserData) ->
    ok;
'v_enum_req.type_enum'(operator_req, _Path,
		       _TrUserData) ->
    ok;
'v_enum_req.type_enum'(operator_msg_req, _Path,
		       _TrUserData) ->
    ok;
'v_enum_req.type_enum'(operator_quit_req, _Path,
		       _TrUserData) ->
    ok;
'v_enum_req.type_enum'(chat_req, _Path, _TrUserData) ->
    ok;
'v_enum_req.type_enum'(chat_msg_req, _Path,
		       _TrUserData) ->
    ok;
'v_enum_req.type_enum'(chat_quit_req, _Path,
		       _TrUserData) ->
    ok;
'v_enum_req.type_enum'(V, Path, TrUserData)
    when is_integer(V) ->
    v_type_sint32(V, Path, TrUserData);
'v_enum_req.type_enum'(X, Path, _TrUserData) ->
    mk_type_error({invalid_enum, 'req.type_enum'}, X, Path).

-compile({nowarn_unused_function,v_type_sint32/3}).
-dialyzer({nowarn_function,v_type_sint32/3}).
v_type_sint32(N, _Path, _TrUserData)
    when -2147483648 =< N, N =< 2147483647 ->
    ok;
v_type_sint32(N, Path, _TrUserData)
    when is_integer(N) ->
    mk_type_error({value_out_of_range, sint32, signed, 32},
		  N, Path);
v_type_sint32(X, Path, _TrUserData) ->
    mk_type_error({bad_integer, sint32, signed, 32}, X,
		  Path).

-compile({nowarn_unused_function,v_type_string/3}).
-dialyzer({nowarn_function,v_type_string/3}).
v_type_string(S, Path, _TrUserData)
    when is_list(S); is_binary(S) ->
    try unicode:characters_to_binary(S) of
      B when is_binary(B) -> ok;
      {error, _, _} ->
	  mk_type_error(bad_unicode_string, S, Path)
    catch
      error:badarg ->
	  mk_type_error(bad_unicode_string, S, Path)
    end;
v_type_string(X, Path, _TrUserData) ->
    mk_type_error(bad_unicode_string, X, Path).

-compile({nowarn_unused_function,mk_type_error/3}).
-spec mk_type_error(_, _, list()) -> no_return().
mk_type_error(Error, ValueSeen, Path) ->
    Path2 = prettify_path(Path),
    erlang:error({gpb_type_error,
		  {Error, [{value, ValueSeen}, {path, Path2}]}}).


-compile({nowarn_unused_function,prettify_path/1}).
-dialyzer({nowarn_function,prettify_path/1}).
prettify_path([]) -> top_level;
prettify_path(PathR) ->
    list_to_atom(lists:append(lists:join(".",
					 lists:map(fun atom_to_list/1,
						   lists:reverse(PathR))))).


-compile({nowarn_unused_function,id/2}).
-compile({inline,id/2}).
id(X, _TrUserData) -> X.

-compile({nowarn_unused_function,v_ok/3}).
-compile({inline,v_ok/3}).
v_ok(_Value, _Path, _TrUserData) -> ok.

-compile({nowarn_unused_function,m_overwrite/3}).
-compile({inline,m_overwrite/3}).
m_overwrite(_Prev, New, _TrUserData) -> New.

-compile({nowarn_unused_function,cons/3}).
-compile({inline,cons/3}).
cons(Elem, Acc, _TrUserData) -> [Elem | Acc].

-compile({nowarn_unused_function,lists_reverse/2}).
-compile({inline,lists_reverse/2}).
'lists_reverse'(L, _TrUserData) -> lists:reverse(L).
-compile({nowarn_unused_function,'erlang_++'/3}).
-compile({inline,'erlang_++'/3}).
'erlang_++'(A, B, _TrUserData) -> A ++ B.


get_msg_defs() ->
    [{{enum, 'req.type_enum'},
      [{create_session, 1}, {server_message, 2},
       {weather_req, 3}, {call_id_req, 4}, {joke_req, 5},
       {operator_req, 6}, {operator_msg_req, 7},
       {operator_quit_req, 8}, {chat_req, 9},
       {chat_msg_req, 10}, {chat_quit_req, 11}]},
     {{msg, create_session},
      [#field{name = username, fnum = 1, rnum = 2,
	      type = string, occurrence = required, opts = []}]},
     {{msg, server_message},
      [#field{name = message, fnum = 1, rnum = 2,
	      type = string, occurrence = required, opts = []}]},
     {{msg, operator_message},
      [#field{name = message, fnum = 1, rnum = 2,
	      type = string, occurrence = required, opts = []}]},
     {{msg, chat_message},
      [#field{name = message, fnum = 1, rnum = 2,
	      type = string, occurrence = required, opts = []}]},
     {{msg, req},
      [#field{name = type, fnum = 1, rnum = 2,
	      type = {enum, 'req.type_enum'}, occurrence = required,
	      opts = []},
       #field{name = create_session_data, fnum = 2, rnum = 3,
	      type = {msg, create_session}, occurrence = optional,
	      opts = []},
       #field{name = server_message_data, fnum = 3, rnum = 4,
	      type = {msg, server_message}, occurrence = optional,
	      opts = []},
       #field{name = operator_msg_data, fnum = 4, rnum = 5,
	      type = {msg, operator_message}, occurrence = optional,
	      opts = []},
       #field{name = chat_msg_data, fnum = 5, rnum = 6,
	      type = {msg, chat_message}, occurrence = optional,
	      opts = []}]},
     {{msg, envelope},
      [#field{name = uncompressed_data, fnum = 2, rnum = 2,
	      type = {msg, req}, occurrence = required, opts = []}]}].


get_msg_names() ->
    [create_session, server_message, operator_message,
     chat_message, req, envelope].


get_group_names() -> [].


get_msg_or_group_names() ->
    [create_session, server_message, operator_message,
     chat_message, req, envelope].


get_enum_names() -> ['req.type_enum'].


fetch_msg_def(MsgName) ->
    case find_msg_def(MsgName) of
      Fs when is_list(Fs) -> Fs;
      error -> erlang:error({no_such_msg, MsgName})
    end.


fetch_enum_def(EnumName) ->
    case find_enum_def(EnumName) of
      Es when is_list(Es) -> Es;
      error -> erlang:error({no_such_enum, EnumName})
    end.


find_msg_def(create_session) ->
    [#field{name = username, fnum = 1, rnum = 2,
	    type = string, occurrence = required, opts = []}];
find_msg_def(server_message) ->
    [#field{name = message, fnum = 1, rnum = 2,
	    type = string, occurrence = required, opts = []}];
find_msg_def(operator_message) ->
    [#field{name = message, fnum = 1, rnum = 2,
	    type = string, occurrence = required, opts = []}];
find_msg_def(chat_message) ->
    [#field{name = message, fnum = 1, rnum = 2,
	    type = string, occurrence = required, opts = []}];
find_msg_def(req) ->
    [#field{name = type, fnum = 1, rnum = 2,
	    type = {enum, 'req.type_enum'}, occurrence = required,
	    opts = []},
     #field{name = create_session_data, fnum = 2, rnum = 3,
	    type = {msg, create_session}, occurrence = optional,
	    opts = []},
     #field{name = server_message_data, fnum = 3, rnum = 4,
	    type = {msg, server_message}, occurrence = optional,
	    opts = []},
     #field{name = operator_msg_data, fnum = 4, rnum = 5,
	    type = {msg, operator_message}, occurrence = optional,
	    opts = []},
     #field{name = chat_msg_data, fnum = 5, rnum = 6,
	    type = {msg, chat_message}, occurrence = optional,
	    opts = []}];
find_msg_def(envelope) ->
    [#field{name = uncompressed_data, fnum = 2, rnum = 2,
	    type = {msg, req}, occurrence = required, opts = []}];
find_msg_def(_) -> error.


find_enum_def('req.type_enum') ->
    [{create_session, 1}, {server_message, 2},
     {weather_req, 3}, {call_id_req, 4}, {joke_req, 5},
     {operator_req, 6}, {operator_msg_req, 7},
     {operator_quit_req, 8}, {chat_req, 9},
     {chat_msg_req, 10}, {chat_quit_req, 11}];
find_enum_def(_) -> error.


enum_symbol_by_value('req.type_enum', Value) ->
    'enum_symbol_by_value_req.type_enum'(Value).


enum_value_by_symbol('req.type_enum', Sym) ->
    'enum_value_by_symbol_req.type_enum'(Sym).


'enum_symbol_by_value_req.type_enum'(1) ->
    create_session;
'enum_symbol_by_value_req.type_enum'(2) ->
    server_message;
'enum_symbol_by_value_req.type_enum'(3) -> weather_req;
'enum_symbol_by_value_req.type_enum'(4) -> call_id_req;
'enum_symbol_by_value_req.type_enum'(5) -> joke_req;
'enum_symbol_by_value_req.type_enum'(6) -> operator_req;
'enum_symbol_by_value_req.type_enum'(7) ->
    operator_msg_req;
'enum_symbol_by_value_req.type_enum'(8) ->
    operator_quit_req;
'enum_symbol_by_value_req.type_enum'(9) -> chat_req;
'enum_symbol_by_value_req.type_enum'(10) ->
    chat_msg_req;
'enum_symbol_by_value_req.type_enum'(11) ->
    chat_quit_req.


'enum_value_by_symbol_req.type_enum'(create_session) ->
    1;
'enum_value_by_symbol_req.type_enum'(server_message) ->
    2;
'enum_value_by_symbol_req.type_enum'(weather_req) -> 3;
'enum_value_by_symbol_req.type_enum'(call_id_req) -> 4;
'enum_value_by_symbol_req.type_enum'(joke_req) -> 5;
'enum_value_by_symbol_req.type_enum'(operator_req) -> 6;
'enum_value_by_symbol_req.type_enum'(operator_msg_req) ->
    7;
'enum_value_by_symbol_req.type_enum'(operator_quit_req) ->
    8;
'enum_value_by_symbol_req.type_enum'(chat_req) -> 9;
'enum_value_by_symbol_req.type_enum'(chat_msg_req) ->
    10;
'enum_value_by_symbol_req.type_enum'(chat_quit_req) ->
    11.


get_service_names() -> [].


get_service_def(_) -> error.


get_rpc_names(_) -> error.


find_rpc_def(_, _) -> error.



-spec fetch_rpc_def(_, _) -> no_return().
fetch_rpc_def(ServiceName, RpcName) ->
    erlang:error({no_such_rpc, ServiceName, RpcName}).


%% Convert a a fully qualified (ie with package name) service name
%% as a binary to a service name as an atom.
-spec fqbin_to_service_name(_) -> no_return().
fqbin_to_service_name(X) ->
    error({gpb_error, {badservice, X}}).


%% Convert a service name as an atom to a fully qualified
%% (ie with package name) name as a binary.
-spec service_name_to_fqbin(_) -> no_return().
service_name_to_fqbin(X) ->
    error({gpb_error, {badservice, X}}).


%% Convert a a fully qualified (ie with package name) service name
%% and an rpc name, both as binaries to a service name and an rpc
%% name, as atoms.
-spec fqbins_to_service_and_rpc_name(_, _) -> no_return().
fqbins_to_service_and_rpc_name(S, R) ->
    error({gpb_error, {badservice_or_rpc, {S, R}}}).


%% Convert a service name and an rpc name, both as atoms,
%% to a fully qualified (ie with package name) service name and
%% an rpc name as binaries.
-spec service_and_rpc_name_to_fqbins(_, _) -> no_return().
service_and_rpc_name_to_fqbins(S, R) ->
    error({gpb_error, {badservice_or_rpc, {S, R}}}).


fqbin_to_msg_name(<<"create_session">>) -> create_session;
fqbin_to_msg_name(<<"server_message">>) -> server_message;
fqbin_to_msg_name(<<"operator_message">>) -> operator_message;
fqbin_to_msg_name(<<"chat_message">>) -> chat_message;
fqbin_to_msg_name(<<"req">>) -> req;
fqbin_to_msg_name(<<"envelope">>) -> envelope;
fqbin_to_msg_name(E) -> error({gpb_error, {badmsg, E}}).


msg_name_to_fqbin(create_session) -> <<"create_session">>;
msg_name_to_fqbin(server_message) -> <<"server_message">>;
msg_name_to_fqbin(operator_message) -> <<"operator_message">>;
msg_name_to_fqbin(chat_message) -> <<"chat_message">>;
msg_name_to_fqbin(req) -> <<"req">>;
msg_name_to_fqbin(envelope) -> <<"envelope">>;
msg_name_to_fqbin(E) -> error({gpb_error, {badmsg, E}}).


fqbin_to_enum_name(<<"req.type_enum">>) -> 'req.type_enum';
fqbin_to_enum_name(E) ->
    error({gpb_error, {badenum, E}}).


enum_name_to_fqbin('req.type_enum') -> <<"req.type_enum">>;
enum_name_to_fqbin(E) ->
    error({gpb_error, {badenum, E}}).


get_package_name() -> undefined.


%% Whether or not the message names
%% are prepended with package name or not.
uses_packages() -> false.


source_basename() -> "erl_playground.proto".


%% Retrieve all proto file names, also imported ones.
%% The order is top-down. The first element is always the main
%% source file. The files are returned with extension,
%% see get_all_proto_names/0 for a version that returns
%% the basenames sans extension
get_all_source_basenames() -> ["erl_playground.proto"].


%% Retrieve all proto file names, also imported ones.
%% The order is top-down. The first element is always the main
%% source file. The files are returned sans .proto extension,
%% to make it easier to use them with the various get_xyz_containment
%% functions.
get_all_proto_names() -> ["erl_playground"].


get_msg_containment("erl_playground") ->
    [chat_message, create_session, envelope,
     operator_message, req, server_message];
get_msg_containment(P) ->
    error({gpb_error, {badproto, P}}).


get_pkg_containment("erl_playground") -> undefined;
get_pkg_containment(P) ->
    error({gpb_error, {badproto, P}}).


get_service_containment("erl_playground") -> [];
get_service_containment(P) ->
    error({gpb_error, {badproto, P}}).


get_rpc_containment("erl_playground") -> [];
get_rpc_containment(P) ->
    error({gpb_error, {badproto, P}}).


get_enum_containment("erl_playground") ->
    ['req.type_enum'];
get_enum_containment(P) ->
    error({gpb_error, {badproto, P}}).


get_proto_by_msg_name_as_fqbin(<<"req">>) ->
    "erl_playground";
get_proto_by_msg_name_as_fqbin(<<"server_message">>) ->
    "erl_playground";
get_proto_by_msg_name_as_fqbin(<<"operator_message">>) ->
    "erl_playground";
get_proto_by_msg_name_as_fqbin(<<"envelope">>) ->
    "erl_playground";
get_proto_by_msg_name_as_fqbin(<<"chat_message">>) ->
    "erl_playground";
get_proto_by_msg_name_as_fqbin(<<"create_session">>) ->
    "erl_playground";
get_proto_by_msg_name_as_fqbin(E) ->
    error({gpb_error, {badmsg, E}}).


-spec get_proto_by_service_name_as_fqbin(_) -> no_return().
get_proto_by_service_name_as_fqbin(E) ->
    error({gpb_error, {badservice, E}}).


get_proto_by_enum_name_as_fqbin(<<"req.type_enum">>) ->
    "erl_playground";
get_proto_by_enum_name_as_fqbin(E) ->
    error({gpb_error, {badenum, E}}).


-spec get_protos_by_pkg_name_as_fqbin(_) -> no_return().
get_protos_by_pkg_name_as_fqbin(E) ->
    error({gpb_error, {badpkg, E}}).



gpb_version_as_string() ->
    "4.10.5".

gpb_version_as_list() ->
    [4,10,5].
